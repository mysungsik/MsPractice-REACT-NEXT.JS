[Authentication INDEX]===================================================================================================================================

1. Authentication 프로세스의 이해

    1. 유저 회원가입
        : 클라이언트 -> (자바스크립트) -> Db 에 저장

    2. 유저 로그인
        : 클라이언트 -> (자바스크립트) -> 서버 -> (서버 validation) -> (Db와 비교)  -> [Yes or no], To 클라이언트

-   3. Yes 라면, Credential == Permisson 을 주는 토큰 을 줌

    ** Credential 을 주는 법

        1. Server side Sessions

            [서버(Db)에, Credential 저장] -> [유저가 로그인할경우,  Credential 을 유저(클라이언트)에게 전송 ]
                -> [ 유저는, 요청할때마다, Credential 을 서버에 제출] -> [적절한 Credential 이라면(Db에 저장된것과 같다면), 서버가 응답]

            ==> 클라이언트에선, 쿠키에 저장하고 제출하는 것
            ==> 서버에선 Db에서 저장하고, 주고 받는것

-       2. Authentication Tokens

            [ 서버가 Permisson Token을 만들고, 사인해, 클라이언트에게 보냄] -> [유저는, 요청할때마다, Token 을 서버에 제출]

            ==> 토큰은, 임의의 문자열임
            ==> 서버에서, Token 을 어디에 저장하지 않음, (그래도 서버는 알 수 있음)

2. SPA 를 만들때, Sessions 보다, Token 을 이용하는 이유 

    1. 굳이 서버를 이용할 필요 없는(Node.js 와는 다르게) Nextjs 는, 굳이 서버에 도달하지 않아도, 로직과, 컴포넌트를 만들 수 있음


    2. 클라이언트는, 백엔드에서, 한번에 모든 페이지를 가져오지 않고, 동적으로 그때그때 페이지를 가져옴
        이 말인 즉, "서버는 클라이언트의 모든 요청을 전부 볼 수는 없음"

            ==> "서버가, 클라이언트의 인증 여부를 알 수 없는 상태에서, 페이지가 로드되는 경우가 많음"

                * 모든 페이지에 getServerSideProps 를 사용하는 것이 아닌 이상

            ==> Frontend 와 Backend 는 "Detached(떨어진)" 상태로 존재하기 때문에
                Backend 에서 "저장하는 형태가 아닌", "클라이언트에게 주고", "확인만 하고"
                Frontend 에서, "독립적 형태의 토큰을 가지고 있다가", "필요할때만 제출" 한 형태가 됌

3. 그래서 Token을 어떻게만든다? - JSON Web Tokens(JWT) 으로 만든다.

    1. Issuer Data  : 토큰이 생성될때, 자동으로 구성되는 데이터(타사패키지가 보통 넣어줌)

    2. Custom Data  : 유저의 정보같은 키

-   3. Secret Signing key   : 클라이언트는 절대 볼 수 없는 키 [오로지 서버만 알고 있음] 이게, Authentication 의 Key 이다.

        => JWT

    JSON 토큰은, 암호화 되어있지 않다. 열어서 볼 수있다. (다만 Secret Signing key 는, 토큰에 포함되지 않는다.)

4. JWT 토큰의 인증 프로세스

    1. [서버에서 생성된 토큰]이, 클라이언트에게 전달되어, [ 클라이언트 사이드 브라우저에 저장]

    2. [ 클라이언트는 요청을 보낼때, 자동으로 토큰을 첨부 ]

    3. [ 서버에서, validation을 거쳐, 요청을 수용하거나 거절 ]

5. "next-auth"  [v3 와 v4 가 있음. v3는 강의, v4는... 직접 찾아보고] 

        [최신버전] : https://next-auth.js.org/getting-started/upgrade-v4

    1) next-auth 에 대한 설명

        : Nextjs 를 위한, 토큰을 만들어 주는데 사용되는 "아주 안전한 패키지"

            [홈페이지] ==>>  https://next-auth.js.org/getting-started/introduction

        : 페이지를 들어가보면, "Getting Started 탭" 에, 사용법이 잘 설명되어 있고
            특히 "providers 탭"에 들어가면, "어느 사이트와 연동되어 사용 가능한지도 써있다(엄청많다)"

-               => 요즘은 구글, 네이버등, 대신 연동 로그인 서비스가 대세이므로!


    2) next-auth 의 기능

        : "서버사이드 뿐 아니라," "클라이언트 사이드" 에서도 사용 가능

            => 단순히, 토큰을 생성하는 것이 아니라, 클라이언트 사이드, API 등을 "보호"하고,
                 "인증여부" 에 따라, "컴포넌트의 변화" 가 생길 수 있기 때문에, 너무나 당연하다

        : "JWT 토큰 생성"


6. JWT 만들기 WTIH "next-auth"  

    <주의할점>

        Next-auth 는 REST API도 당연히 지원하지만, 
-           내장된 next-auth 의 endpoint 와 겹쳐서는 안된다.

        [ next-auth 의 REST API ]
            URL : https://next-auth.js.org/getting-started/rest-api#getpost-apiauthcallbackprovider

            [내장된 endpoint]
                GET /api/auth/signin

                POST /api/auth/signin/:provider

                GET/POST /api/auth/callback/:provider

                ...
            등이 존재하니, 한번 보고, 
-               겹치게만 하지 않게 RESTAPI의 endpoint 를 구성하자

        


[MAKING INDEX]===================================================================================================================================

1. 기본 페이지 구성 생성
    home, signup, login, Profile

2. Layout 구성
    header, Layout

3. 페이지들 적당히 디테일하게 구성

4. mongodb 설치 및 api 생성 후 연결

5. bycrypt 설치 및 hash 된 비밀번호, mongodb 에 저장
    npm i bcrypt

6. API validation 적용
    같은 userid 있으면, 가입안되게,
    없으면 db에 넣고
    hashpassword도 넣고
    ...

- 7. Next-Auth 를 사용한, 인증토큰 만들기 

    getting start : https://next-auth.js.org/getting-started/example
    
    deffrent v4 : https://next-auth.js.org/getting-started/upgrade-v4

    0) npm install next-auth


    1) "api 폴더" 안에, "auth 폴더" 만들고,  [...nextauth].js 만들고 "next-auth" "import 후, export"

        ================================
        < /api/auth/[...nextauth].js>

            import NextAuth from "next-auth"

            export default NextAuth
        ================================




    2) "Provider 를 선택한 후(apple, google, naver, ... Credentials )" 적용시킨다. 

            * provider는, 사용자 인증에 필요한, 토큰생성 작업 (naver 연동로그인, google 연동 로그인) 을 제공하는 코드

            ** 나의 경우, 연동할 provider 가 아니라, 개인 REST API 에서, validation 을 적용시킬 것이므로,
                스스로 로직을 짜는 Credentials provider 를 선택한다.

        ================================
        < /api/auth/[...nextauth].js>

            import NextAuth from "next-auth";
            import credentials from "next-auth/providers/credentials";
            
            export const authOptions = {
                providers: [
                    credentials({
                        async authorize(credentials){

                        }
                })
                ],
            };
            
            export default NextAuth;
        
        ================================

            ==> credentials 안에, DOCS 에서 제공하는 것처럼, 

                    providers: [
                        GithubProvider({
-                           clientId: process.env.GITHUB_ID,
-                           clientSecret: process.env.GITHUB_SECRET,
                        }),

                이런식으로, next-auth 가 제공하는 양식을 따를 수도 있지만,
                "우리는 자체적으로 REST API validation 로직을 만들었기 때문에," 

-               비동기 함수인 "authorize"함수를 불러와, 자체 논리를 넣는다.




    3. 이후, "credentials" 안에, "인증에 필요한 것들을 넣고, 인증절차를 밟을 것이기 때문에", "credentials 를 이용하여, 인증하는 로직을 생성".

        ================================
        < /api/auth/[...nextauth].js>
            
            import NextAuth from "next-auth";
            import credentials from "next-auth/providers/credentials";
            import {checkUserPassword, connectDb, findExsiteUserid,} from "../../../helper/db-util";
            
            export const authOptions = {
                providers: [
                    credentials({
                        async authorize(credentials) {

                            const client = connectDb();
                    
                            const findedUser = await findExsiteUserid(client,"userInfo",credentials.id);
                    
                            if (!findedUser) {
                                throw new Error("no user find");
                            }
                    
                            const isValid = await checkUserPassword(credentials.password, findedUser.password);
                    
                            if (!isValid) {
                                throw new Error("user password is wrong");
                            }
                    
                            client.close();
                        },
                }),
            ],
            };
        
        export default NextAuth;

        ================================

    4. "로직을 만족하는 값"이 나온다면, "return{}" 을 통해, "JSON DATA 를 반환(JWT 데이터 생성)"하고, "session 옵션" 을 통해, "jwt 활성화"

        ** OPTION 들 (session, providers ...) URL
                : https://next-auth.js.org/configuration/options


        ================================  
        < /api/auth/[...nextauth].js>
        
        
            import NextAuth from "next-auth";
            import credentials from "next-auth/providers/credentials";
            import {checkUserPassword, connectDb, findExsiteUserid,} from "../../../helper/db-util";

            export const authOptions = {
-               session: {
-                   jwt: true,
                },
                providers: [
                    credentials({
                        async authorize(credentials) {
                            const client = connectDb();

                            const findedUser = await findExsiteUserid(client,"userInfo",credentials.id);

                            if (!findedUser) {
                                client.close()
                                throw new Error("no user find");
                            }

                            const isValid = await checkUserPassword(credentials.password,findedUser.password);

                            if (!isValid) {
                                client.close()
                                throw new Error("user password is wrong");
                            }
                            
                            client.close();
    -                       return { id: findedUser.id };   // JSON WEB TOKEN 에 포함되는, DATA, "절대 비밀번호 넣지 말것 - 클라이언트에도보임"

                        },
                    }),
                ],
            };

            export default NextAuth;

        ================================




[복습]===========================

1. "직접적인 컴포넌트 함수를 제외하고는", [컴포넌트 함수 밖에 helper 함수를 만들던], [컴포넌트 함수 안의 함수를 만들던]
-       직접적인 컴포넌트 함수를 제외하고는 전부 async, await 를 사용가능하다

    <불가>

        async function MsComponent(){
            ...
        }

    <가능>

-       async helperFunction(){
            ...
        }

        function MsComponent(){
            ...
            async function msFunction(){
                ...

-               await helperFunction()
            }
        }


