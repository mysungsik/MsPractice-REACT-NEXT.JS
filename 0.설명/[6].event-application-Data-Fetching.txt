<설명>
    : "기존에 Next.js"로 작업했던 "event page" 를, 
        이번에 배운 적절한 데이터 페칭 기술을 사용해서, Data를 fireBase 에서 불러온 후에, 작업해보자

    : 적절한 페이지에, 알맞는 적절한 페칭 방법을 사용해, 데이터 페칭을 진행해보자

<유의사항>
    1. "getStaticProps"와 "getServerSideProps" 함수는 "Pages 폴더에서만 쓸 수 있다는 점" 명심!!
    2. "useSWR Hook" 은 "Pages폴더" "컴포넌트 함수 안에만" 쓸 수 있다는 사실을 명심


<나의 경우>

-   ** 전부" helper 폴더"의 "api-util 이라는 파일"을 만들어서, "아웃소싱"하자

    1. "메인 이벤트 페이지"

        : 검색이 되어야 하니, 데이터가 미리 페칭 되어 있어야 하고
        : 데이터들이 순식간에 금방금방 바뀔 필요가 없으니 = 클라이언트사이드 데이터페칭 X

            ==> "getStaticProps" 와 "getStaticPaths" 로, "미리 데이터페칭 및 사전렌더링"

    2. "데이터 필터 페이지"

        : 검색 될 필요가 없고
        : 데이터가 미리 들어와 있을 필요도 없으므로
        : 또한, 조합법이 너무 많아, 전부 사전 렌더링 하는 것은 잘못된 일이므로

        <방법1>
            ==> "useSWR" 을 사용한 "클라이언트 사이드 데이터 페치" 및 "필터"
                : 첫 들어가는 페이지가 빠르고, 들어가서 보는것이 살짝 느림

        <방법2>
        
            ==> "getServerSideProprs" 를 사용하여, 데이터 페칭
                : 첫 들어가는 페이지가 느리고, 들어가서 보면 빠름

        <방법3>

            ==> "getServerSideProps" 와 "getStaticPaths" 를 사용하돼, "fallback" 을 "blocking" 설정



    3. "이벤트 디테일 페이지"

        : 이벤트에 대한 모든 세부사항이 들어있어
        : 데이터가 미리 페치되어, 모든 디테일 페이지들이 검색 가능해야한다.

            ==> "동적 페이지"의 getServerSideProps, getStaticPaths 로, "사전 렌더링"
        
        [추가사항]
            "paths에", getFeatureEvent 로, "특정 키(isFeature)을 가진 데이터들"만, "따로 사전 렌더링"시키도록 하자
                : 모든 페이지를 사전 렌더링 하는것은 잘못된 일이고, 데이터만 잡아먹으므로,
                  "  특정 자주 방문하는 이벤트만 isFeature 를 설정하여, 따로 렌더링하는것"

< 더 나은 코드, 실패한 점>

    1. "getStaticProps" 를 "외부 파일에 아웃소싱" 하여 결과값만 return 하여, 페이지 내에 사용하면 좋았다.

    2. "useEffect" 는, "getServerSideProps, getStaticProps 에 사용할 수 없다"

    3. "useSWR" 은, "외부 파일에 아웃소싱 할 수 없다."

    4. [FireBase] 의 객체 안의 객체를 뽑을때, 적절한 키와 밸류라면 전부 다 각각 지정하지 말고 ...data[key] 로 전부 빼올 수 있다.

        for (const key in data) {                           for (const key in data) {
            reformData.push({                                   reformData.push({
                id: key,                                            id: key,
                title : date[key].title,             ==>            ...data[key],
                location : date[key].location,                  });
                    ...   
                description: date[key].description                          
            }); 

    5. "getServerSideProps", "getStaticProps" "getServerSideProps" 에는, JSX 구문을 사용 할 수 없다.

            *JSX : "컴포넌트 함수에서 return 하는 HTML 처럼 보이는 구문들"
< 코드 >

    1. "메인페이지" ==============================================================================

        import EventList from "../components/events/event-list";
        import EventsSearch from "../components/event-detail/event-search";
        import { useRouter } from "next/router";
        import { getAllEvents } from "../helper/api-util";

        function HomePage(props) {
            const { allEvents } = props;
            const router = useRouter();

            function searchEventHandler(year, month) {
                const fullPath = `/event/${year}/${month}`;

                router.push(fullPath);
            }

            return (
                <div>
                <EventsSearch onSearch={searchEventHandler} />
                <EventList eventdatas={allEvents} />
                </div>
            );
            }

        export async function getStaticProps() {

            const reformData = await getAllEvents();
            return {
                props: {
                allEvents: reformData,
                },
                revalidate: 1800,
            };
            }
        export default HomePage;

    2. "필터 페이지"==============================================================================

        : "getServerSideProps" 를 사용해도 된다. 그렇게 되면, useRouter 도 필요없이,  
            [context.params.date] 로 [query.date] 를 대신 할 수 있다

        : "현 코드는, useSWR Hook 을 사용한, 클라이언트 사이드 데이터페치를 사용했다."

            import { useRouter } from "next/router";
            import { Fragment } from "react";
            import { useState, useEffect } from "react";
            import useSWR from "swr";

            import Button from "../../components/ui/button";

            import EventList from "../../components/events/event-list";
            import ErrorAlert from "../../components/ui/error-alert";

            function DateFilter() {
                const [filteredEvent, setFilteredEvent] = useState();
                const eventdate = useRouter();
                const dateFilter = eventdate.query.date;

                const fetcher = (url) => fetch(url).then((res) => res.json());

                const { data, error } = useSWR(
                    "https://next-course-ca17a-default-rtdb.firebaseio.com/event.json",
                    fetcher
                );

                useEffect(() => {
                    if (data) {
                    const reformData = [];

                    for (const key in data) {
                        reformData.push({
                        id: key,
                        ...data[key],
                        });
                    }

                    setFilteredEvent(reformData);
                    }
                }, [data]);

                if (!filteredEvent) {
                    return (
                    <Fragment>
                        <p> Invalid Filter</p>;<Button link="/"> go back to event </Button>
                    </Fragment>
                    );
                }

                const [inputYear, inputMonth] = dateFilter;

                const NumInputYear = +inputYear;
                const NumInputMonth = +inputMonth;

                // 넣은 값이 이상할 경우 validation
                if (
                    isNaN(NumInputYear) ||
                    isNaN(NumInputMonth) ||
                    NumInputYear == "" ||
                    NumInputMonth == "" ||
                    NumInputYear > 2030 ||
                    NumInputYear < 2010 ||
                    NumInputMonth < 1 ||
                    NumInputMonth > 12
                ) {
                    return (
                    <Fragment>
                        <p> Invalid Filter</p>;<Button link="/"> go back to event </Button>
                    </Fragment>
                    );
                }

                const filteredData = filteredEvent.filter(
                    (item) =>
                    new Date(item.date).getFullYear() === NumInputYear &&
                    new Date(item.date).getMonth() === NumInputMonth - 1
                );

                if (!filteredData || filteredData.length == 0) {
                    return (
                    <Fragment>
                        <ErrorAlert>you have no result</ErrorAlert>
                        <Button link="/"> go back to event </Button>
                    </Fragment>
                    );
                }

                return (
                    <div>
                    <EventList eventdatas={filteredData} />
                    </div>
                );
                }
            export default DateFilter;



    3. "이벤트 디테일 페이지" ==============================================================================

        import { findEvent } from "../../helper/api-util";
        import { getAllEvents } from "../../helper/api-util";

        import EventLogistics from "../../components/event-detail/event-logistics";
        import EventSummary from "../../components/event-detail/event-summary";
        import EventContent from "../../components/event-detail/event-content";

        import { Fragment } from "react";

        function EventDetailPage(props) {
            const eventById = props.eventById;

            if (!eventById) {
                return <p> no Event Found!</p>;
            }
            return (
                <Fragment>
                <EventSummary title={eventById.title} />
                <EventLogistics
                    date={eventById.date}
                    address={eventById.location}
                    image={eventById.image}
                    imageAlt={eventById.title}
                />
                <EventContent>
                    <p> {eventById.description}</p>
                </EventContent>
                </Fragment>
            );
            }
        export default EventDetailPage;

        export async function getStaticProps(context) {
            const { params } = context;
            const inputId = params.eventid;

            const foundEvent = await findEvent(inputId);

            return {
                props: {
                eventById: foundEvent,
                },
                revalidate: 30,
            };
            }

    
        export async function getStaticPaths() {
            const allEvents = await getAllEvents();

            const prePath = allEvents.map((event) => ({ params: { eventid: event.id } }));

            return {
                paths: prePath,
                fallback: false,
            };
        }

------------[만약 전부 사전렌더링을 하지 않는다면 (사실 이게 더 맞다. 괜히 데이터만 잡아먹는다)] -------------------------------------------
       
        export async function getStaticPaths() {
-           const allEvents = await getFeatureEvent();
          
            const prePath = allEvents.map((event) => ({ params: { eventid: event.id } }));
          
            // paths : [ {params : {동적파일name : "들어올수있는URL"}}, {params : {동적파일name2 : "들어올수있는URL2"}} ...]
            return {
              paths: prePath,
-             fallback: true,
            };
          }
          

    ========================================

    4.   " 데이터처리를 아웃소싱한 util-api 파일 "

        export async function getAllEvents() {
            const response = await fetch(
            "https://next-course-ca17a-default-rtdb.firebaseio.com/event.json"
            );
        
            const data = await response.json();
        
            const reformData = [];
        
            for (const key in data) {
            reformData.push({
                id: key,
                ...data[key],
            });
            }
        
            return reformData;
        }
        
        export async function findEvent(inputId) {
            const reformData = await getAllEvents();
        
            const foundEvent = reformData.find((event) => event.id === inputId);
        
            return foundEvent;
        }
        
        export async function getFeatureEvent() {
            const reformData = await getAllEvents();
        
            const featureEvents = reformData.filter((event) => event.isFeatured == true);
        
            return featureEvents;
        }
        




   