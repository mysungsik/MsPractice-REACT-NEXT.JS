0. Head 그리고 meta-data

    meta-data 가 들어 있는 Head 태그는 html 에서도 가장 위에 있는 중요한 태그이다.

   Head 안에,  <title> 이라던가, <meta name="description" content="..."> 라던가,

   유저의 사이트 경험에 아주 중요한 역학을 담당한다.

   nextjs 는, 이러한 Head 섹션을 아주 편하게 만들도록 도와준다.

-  [import Head from "next/head"] 를 통해서 만든 <Head> </Head> 를 통해서

1. Head 데이터 추가하기 [import Head from "next/head"]

    : import Head from "next/head" 로, Head를 import 하고
        "return 되는곳 아무 곳이나" 사용하면 된다.

-       import Head from "next/head"

        function HomePage(props) {
                ...         
            return (
              <div>
-               <Head>
                  <title> eventHomePage </title>
                  <meta name="description" content="Find event allow you to evolve" />
-               </Head>
                <EventsSearch onSearch={searchEventHandler} />
                <EventList eventdatas={allEvents} />
              </div>
            );
          }

    ==> 이런 식이다.

2. HEAD 의 동적 이름 추가 : HEAD 에도 동적 값을 넣을 수 있다.

-   import Head from "next/head"

    function EventDetailPage(props) {
      const eventById = props.eventById;

      if (!eventById) {
        return <p> no Event Found!</p>;
      }
      return (
        <Fragment>
-         <Head>
-           <title> {eventById.title} </title>
-           <meta name="description" content ={eventById.description}>
-         </Head>
          <EventSummary title={eventById.title} />
          <EventLogistics
            date={eventById.date}
            address={eventById.location}
                ...
              
        </Fragment>
      );
    }

  ** Head 를 넣을때는, 오류 " if(!data){return ( ... )} " 일시 나타나게 만드는 return 에는 넣지 말고
      "메인 컴포넌트 함수의 return" 에만 넣도록 하자

3. components 안에 Head를 JSX 만들어 재사용하기

    let HeadData = (
      <Head>
        <title>...</title>
        <meta ...>
      </Head>
    )

  ==> HeadData 를 컴포넌트 함수 내에 JSX 로 만들어서 사용

4. _app.js 안에, [모든 페이지에 적용할 Head] 를 넣어, 모든 페이지에 한번에 적용
    : 모든 페이지에 적용해야 하는 meta data 가 있다.
      가령, "viewport" 같은, "반응형 페이지의 스케일을 결정하는" 메타데이터 같은 것들

    <_app.js>

-     import Head from "next/head";

      import Layout from "../components/layout/layout";
      import "../styles/globals.css";

      function MyApp({ Component, pageProps }) {
        return (
          <Layout>
            <Head>
-             <meta name="viewport" content="initial-scale=1.0, width=device-width" />
            </Head>
            <Component {...pageProps} />
          </Layout>
        );
      }

      export default MyApp;

5. Next.js 는, Head 를 병합(오버라이드)시킨다. "중복된다면", 가장 최근의 것으로, 덮어씌운다.

6. [_document.js] 의 역할

    : _document.js 파일은 "모든 _app.js(문서)의 파일위로 오버라이드"(덮어씌워지는)되는 파일이다.

    기본 구조는, 클래스 함수로 되어있고

    <기본 구조>
      import Document, {Html, Head, Main, NextScript } from "next/document"

      class MyDocument extends Document {
        render() {
          return (
            <Html/>
              <Head/>
              <body>
                <Main />
                <NextScript />
              </body>
            </Html>
          );
        }
      }

-  <_document.js 의 역할>

    : 애플리케이션의 "바깥쪽에서",  "전체 애플리케이션을 컨트롤" 하는 역할을 할 수 있다.

      예로, "html 의 lang 을 만진다던가", "최종적으로 만들어진 애플리케이션 전체에, 컨텐츠를 추가한다던가" 하는 역할이 가능하다.

      <예시>

        import Document, {Html, Head, Main, NextScript } from "next/document"

        class MyDocument extends Document {
          render() {
            return (
-             <Html lang="en" />
                <Head/>
                <body>
-                 <div id="overlays" />
                  <Main />
                  <NextScript />
                </body>
              </Html>
            );
          }
        }

7. 이미지의 최적화 [import Image from "next/image"]
    : 개발 단계에서야, 어떤 이미지를 쓰던 상관이 없지만,
    : 배포하기 위한 "프로덕션"용 앱에, "쓸데없이 커다란 이미지 파일을" 등록하면, 문제가 야기될 수 있다.

    "Nextjs" 에서는 "Image 컴포넌트"를 제공한다.

      <사용>
        : 기본 img 태그처럼 사용하돼, "width"와, "height" 를 지정해주면 된다.
          "width와 height는 픽셀단위"이다.

      <코드>
        import Image from "next/image"  

          ...
-       <Image src="..." alt="..." width={xxx}  height={xxx} />

      <장점>
        1. 기본 img 태그와 다르게, lazy loading 이라하여, 이미지 요청을 받을때만 그때그때 생성되어, 매우 빠르다.
        2. Next.js 가, "알아서", "유저 디바이스에 맞춰서, 유저의 브라우저에 맞춰서 '이미지 파일 크기와 확장자'를 상대적으로 조절한다."
            *ex) 크롬은 .WEBP 확장자를 이미지에 사용한다.
            
        3. 조절된 파일의 용량은, 캐쉬에 저장되어, 다음에 비슷한 디바이스가 나타나면 그곳에 투입시킨다.