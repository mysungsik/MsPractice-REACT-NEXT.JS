0. API 폴더의 특징

    Next.js의 api 폴더는, 특수한 형태로 폴더를 처리한다.

    바로, "리액트 컴포넌트 함수를 생성"하지도, "내보내지도 않는다".

    대신, "표준 자바크스립트 함수를 생성하고, 내보낸다."

-   그 함수는, "서버사이드 코드"를 실행할 수 있다!" (req ,res)
        ==> 추가적으로, 이 함수는 절대로, 웹페이지에 방문한 사람들에겐 보이지 않는다는것!!
        ==> 마치, getStaticProps 나 getServerSideProps 와 같이!

1. API ENDPOINT 를 만들어보자

- [반드시 ******]
    "pages 폴더 안"에 "api 라는 폴더이름"을 짓고, 
    그 안에 "api 로 활용할 파일들"을 넣어야한다.

- [api 폴더 안에는]

    여태 해온것들과 마찬가지로, 

    "index.js" 를 만들면        /api/
    "feedback.js"를 만들면      /api/feedback
    "content폴더, index.js"     /api/content/
    "content폴더, feedback.js"  /api/content/feedback 
        ...

    처럼 URL 값이 정해진다.

2. 프론트엔드에서 "POST" 로 값을 보내면, 파일에 저장하고, "GET"요청으로, 값을 받아오는  API를 만들어보자
    
    <유의할점>
-       1. api 폴더 안의 자바크스립트파일은, 서버에서 실행되는 자바스크립트 파일이다
            => "fs", "path", "req","res" 등 ... "express.js" 에서 사용하던 것들을 전부 사용 할 수 있다.

        2. (req) 안에는 많은 것들이 담겨져있다. 특히, "req.method" 로, 어떤 요청이 왔는지 확인이 가능하고, 
            "req.body" 로 값을 가져올 수 있다.
            
        3. "Next.js" 에서는, "프론트엔드에서 오는 데이터가 pareser 없이도, 자동으로 파싱된다." ** 미춌네!

        4. [복습용] 파일을 읽고 쓰는 것은,
            1) json 데이터파일을 만들고
            2) json 데이터 파일 안에 빈 배열을 넣고
            3) const data = fs.readFileSync(path) 로 데이터를 읽어와 저장하고
            4) 읽어온 데이터에 내가 넣을 값을 push 하고 [data.push(값)]
            5) 그 데이터를 다시 fs.writeFileSync(path, data) 로 쓰면 끝

        5. [복습용] path 를 설정하는 방버벵 관하여
            "path.join 은 절대경로를 받는다"
            "process.cwd()" 는 "현 파일이 존재하는 폴더" 로부터, "가장 상위 루트폴더"를 받는다.

            ==> path.join(process.cwd(),"data", "feedback.json")

            을 하면, "루트폴더 / data / feedback.json "파일이 설정된다.

    <API>
-     import fs from "fs";                            ** express(서버측) 에서 사용가능한 것들을 사용 할 수 있다.
-     import path from "path";

-     function loadFilePath() {                       ** 코드 중복을 피하기 위한, 헬퍼함수처리

        const filePath = path.join(process.cwd(), "data", "feedback.json");
        return filePath;
      } 
-     function loadFileData(filePath) {               ** 코드 중복을 피하기 위한, 헬퍼함수처리
        const fileData = fs.readFileSync(filePath);
        const data = JSON.parse(fileData);
        return data;
      }

      function handler(req, res) {
-       if (req.method == "POST") {                   ** 요청받은 METHOD 를, "req.method" 로 구분할 수 있다.
          const newFeedBack = {
            id: req.body.enteredId,
            email: req.body.enteredEmail,
            text: req.body.enteredText,
            date: new Date().toISOString(),
          };

          const filePath = loadFilePath();
          const data = loadFileData(filePath);
          data.push(newFeedBack);
-         fs.writeFileSync(filePath, JSON.stringify(data));              ** [받아서 사용할땐, 자바스크립트], [줄때는 반드시, "json 데이터"]로
          res.status(201).json({ message: "Success!", feedback: newFeedBack });
        } else {
          const filePath = loadFilePath();
          const data = loadFileData(filePath);
          res.status(400).json({ message: "nope!", feedback: data });
        }
      }

-     export default handler;

    

    <프론트>
    import { useRef, useState } from "react";

    function HomePage() {
      const [userData, setUserData] = useState();
-     const [apiFeedback, setApiFeedBack] = useState([]);       ** 초기값을 설정해둬야, return 에서, {apiFeedback.map()} 을 써도, 초기값이 없는 오류가 생성되지 않음
    
      const idRef = useRef();
      const emailRef = useRef();
      const textRef = useRef();
    
      function submitHandler(event) {
        event.preventDefault();
    
        const enteredId = idRef.current.value;
        const enteredEmail = emailRef.current.value;
        const enteredText = textRef.current.value;
    
        const enteredData = {
          enteredId: enteredId,
          enteredEmail: enteredEmail,
          enteredText: enteredText,
        };

//Post요청 ==========
        fetch("/api/feedback", {
          method: "POST",
          body: JSON.stringify(enteredData),
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            setUserData(data);
          });
      }
    
      let prase = "";
    
      if (userData) {
        prase = userData.feedback.text;
      } else {
        prase = "no data";
      }
    
//Get요청 ==========
      function loadFeedbackHandler() {
        fetch("/api/feedback")
          .then((res) => res.json())
          .then((data) => {
-           setApiFeedBack(data.feedback);
          });
      }
    
      return (
        <div>
          <div>
            <h1> HomePage</h1>
          </div>
          <form>
            <div>
              <label htmlFor="inputId"> Input your Id</label>
              <input type="text" id="inputId" ref={idRef} />
            </div>
            <div>
              <label htmlFor="inputEmail"> Input your Email</label>
              <input type="email" id="inputEmail" ref={emailRef} />
            </div>
            <div>
              <label htmlFor="des"> textARea</label>
              <textarea id="des" ref={textRef}></textarea>
            </div>
            <div>
              <button onClick={submitHandler}> Send Feedback </button>
            </div>
          </form>
          <div>{prase}</div>
          <div>
            <button onClick={loadFeedbackHandler}> Load Feedback</button>
          </div>
          <ul>
-           {apiFeedback.map((feedback) => (                          **useState 에, 초기값 빈배열을 설정해 놓았기에, 새로고침해도, 오류가나지않음
              <li key={feedback.id}> {feedback.id}</li>
-           ))}
          </ul>
        </div>
      );
    }
    export default HomePage;
    


    <data-feedback.json>

        []

3. 만약, POST 가 아니라 GET 요청 ( ex: 주소창에 직접 http://localhost:3000/api/feedback 을 친다던가), Ajax로 GET 요청을 보낸다던가,
    
    하면, API 의 else 로 인해, 뒤의 값이 get 요청으로 들어갈것이다.


4. [내부에서 만든 "자체 REST API"] 와 [getStaticProps 를 사용한, 프리 데이터페칭] 을 연결! - 매우매우매우 중요!!!

    : "컴포넌트 함수"에서는, "fetch" 를 사용하여, "서버(DB or file)"에 "데이터를 저장하거나, 불러왔다".

-   *** 그렇다면! "서버측에서 실행되는 "getStaticProps" 나, "getServerSideProps"" 에서 값을 미리 불러와 "데이터 프리페칭"을 하는 경우에는 어떨까?


  <getStaticProps 와 내부에서 만든 "자체 REST API">
    
    ** [내부 API를 사용할 때]에는 , "getStaticProps" 에서는 "fetch" 를 사용해, "값을 가져 올 수 없다"!!

      * 이전에 "fireBase 를 사용할때, fetch 를 사용할 수 있었던 이유"는 , "fireBase는 외부 API 이기 때문이다".

-     ** 자체적으로 만든 "내부 API" 를 사용할 때에는, "fetch 를 사용하여 값을 가져 올 수 없다".

    대신, "api 폴더에, api 로 만든 함수들"을 "export" 하여, 

-   "직접 값을 import 하는 방법을 사용한다."  *****

    [이것이 가능한 이유는]

      1. 기능적으로, "자체 API" 와 "getStaticProps" 는 "같은 서버 localhost:3000" 에 존재 하기 때문이다.
        ==> 불필요한 HTTP REQUEST 를 사용하지 않는다.

      2. 보안적인 기능으로 ,
        "getStaticProps" 와 "getServerSideProps" 는, "hydrate(수화)" 에 의해, "클라이언트 들에게 공개되는 코드가 아니"라서 가능하다

        만약, 이 코드들이, 유저들이 볼 수 있었다면,  그것은 문제가 될것이지만, "이 함수 안에있는 코드들은, 유저들에게 보이지 않는다".


  < API 코드 >
-   : 앞서 만들었던 API 코드에, [path 를 얻는 함수] 와 [fileData 를 얻는 함수] 를 "export" 한다.

    import fs from "fs";
    import path from "path";

    function handler(req, res) {
-     export function loadFilePath() {
        const filePath = path.join(process.cwd(), "data", "feedback.json");
        return filePath;
      }
-     export function loadFileData(filePath) {
        const fileData = fs.readFileSync(filePath);
        const data = JSON.parse(fileData);
        return data;
      }

      if (req.method == "POST") {
        const newFeedBack = {

            ...


  < Feedback.js Page>
      : "자체 API 함수" 를 사용할 때에는, "절대로 fetch 로 값을 가져오지 않고", "API 에서 export 한 함수"를 "받아서 사용한다."

-     import { loadFilePath, loadFileData } from "./api/feedback";

      function FeedbackPage(props) {
        return (
          <ul>
            {props.feedback.map((feedback) => (
              <li key={feedback.id}>{feedback.id}</li>
            ))}
          </ul>
        );
      }
      
-     export async function getStaticProps() {
-       const path = loadFilePath();
-       const data = loadFileData(path);
      
        return {
          props: {
-           feedback: data,
          },
        };
      }
      
      export default FeedbackPage;
      
5. [동적 API 라우터가 왜 필요한가?]

    : "무한 증식 컨텐츠" 안의 "무한증식 버튼" => "PAGE 내에 필요한 데이터"를, "각 ID마다 다르게 필터해서 받아"와야함

    ==>> 이렇게 쓰려면, [버튼을 눌렀을대, "버튼이 동적 ID 값을 가지고, 동적 API 에 요청"] => ["동적 API 는 값에 맞는 필터된 데이터를 전달" ]

6. 동적 API 만들기

  1. api 폴더 내에, [xx].js 를 이용해, 동적 라우터를 만든다.

  2. "동적 API" 도, 결국 [전체 값에서 필터처리를 한 것이기 때문에]
      전체 값을 가져오는, "전체 API" 를 "먼저 만든 후", import 하여, 값을 가져오고, 필터처리를 하는게 보통이다.

  3. 동적 값 가져오기 = req.query.동적파일이름

  4. "함수 파라미터 안에 들어갈 인수(아규먼트)를 고정시키는" "func.bind()" 에 대한 이해 [0.REACT-JAVASCRIPT.txt , 자바스크립트 10번 참조]


  ===== < Page (프론트엔드) , 데이터 요청(동적 버튼) > =========================================================================
  
  ** "어떻게 동적인 API 경로로 fetch 요청을 보낼것인가"

-  ****   [ bind로, argument 를 고정시켜서, 보낸다. ]   *****

    import { loadFilePath, loadFileData } from "./api/feedback";
    import { Fragment, useState } from "react";

    function FeedbackPage(props) {
      const [feedbackData, setFeedbackData] = useState("");

-     function showDetailHandler(id) {
-       fetch(`api/${id}`)                                                      ** Detail Button을 눌렀을때, Detail 데이터 요청을 fetch 로
          .then((res) => res.json())
          .then((data) => {
            setFeedbackData(data.feedback);
          });
      }
      return (
        <Fragment>
         <div>
            <h1>{feedbackData.id}</h1>
            <p>{feedbackData.email}</p>
            <p> {feedbackData.text}</p>
          </div>
          <ul>
            {props.feedback.map((feedback) => (
              <li key={feedback.id}>
                {feedback.id}
  -             <button onClick={showDetailHandler.bind(null, feedback.id)}>        ** bind 를 사용한 argument 고정
                  Show Detail
                </button>
              </li>
            ))}
          </ul>
        </Fragment>
      );
    }

    export async function getStaticProps() {
      const path = loadFilePath();
      const data = loadFileData(path);

      return {
        props: {
          feedback: data,
        },
      };
    }

    export default FeedbackPage;

  ===== < API (백엔드) , 데이터 응답(동적 데이터) > =========================================================================

    ** id에 맞는 디테일 데이터를 어떻게 받아서 보낼것인가?
      : 전체 데이터를 "자체 api 가 가져오듯 가져와서"(같은서버측이니까 fetch는 X)
          "find() 를 통해, 데이터를 걸러"내서 "res" 로 보내줌

-     import { loadFileData, loadFilePath } from "../api/feedback";                   ** 전체 데이터

      function handler(req, res) {
        const filePath = loadFilePath();
-       const fileData = loadFileData(filePath);                                       ** 전체 데이터
-       const feedbackId = req.query.feedbackid;                                       ** 동적 URL 받기
-       const filteredData = fileData.find((data) => data.id === feedbackId);           ** FILTER 로 거르기

        res.status(200).json({
          feedback: filteredData,
        });
      }

      export default handler;

  ==> 최종적으로, "feedback Page" 에서는, "사전데이터페칭"을 통해, "모든 데이터를 불러와 리스트를 만들고"
        각 버튼마다, "동적 API"와 결합해, "디테일 정보를 불러오게 만들었다."

  -      "현 페이지 안에 만들었따는 것이 중요"

        "만약, 페이지를 건너가서, 디테일 페이지를 따로 꾸미고 싶다면"

        1. 동적 디테일 페이지 껍데기를 만들고, props
        2. 동적 디테일 페이지에, 데이터페치 및, 데이터패스 생성하여, 프리데이터페칭
        3. feedback 페이지에서는, 그냥 링크로 넘겨주기만, 
        4. 링크 넘길때 역시, bind() 를 사용하면 간편하게 넘길 수 잇겠다.

7. [...xxx].js 를 API 에 넣어도 당연히 사용 할 수 있다.
    방법은 똑같다.

8. API 의 구조화  : [폴더를 잘 사용하여, API 를 구조화하자]

  :   "api/feedback/f1" 이 낫지

      "api/f1 " 이런 형태면, 별로 구조화되어 있지 못하다.


[최종정리]

  1. API 를 사용하여, fetch 요청으로, 데이터를 주고 받을 수 있다.

  2. [컴포넌트 함수의 API 요청] : 내부 API 를 기준으로, fetch 를 사용하여, API 에게 요청을 한다.

  3. API 는 req로 받고, res.json 으로 데이터를 돌려보내준다.

  4. API 는,  req.method 로, 요청 형태를 받고, req.body로 값을 받는다.

  5. [ 컴포넌트 함수 이외의 API 요청] : 내부 API 를 기준으로, getServerSideProps, getStaticProps 등으로 API 를 요청하는 것은

      "fetch" 를 통해서 하는 것이 아니고, "export 한, API 내부의 값을 가져오는 함수"를, "import 하여 그 값을 가져온다".

        ** 내부 API 기준이다. fireBase 같은 외부 API를 쓰는 곳은, "같은 서버가 아니므로", 여전히 fetch 를 사용한다.

  6. [ API 파일 에서 다른 API 파일로] : 역시나, "같은 서버를 이용하고 있기 때문에", "서버측 코드를 쓰는"
      
        API 파일 끼리는, export 한 함수를 import 해서 값을 가져오도록 한다.

  7. [ 동적 API 로의 요청 ] : 키 포인트는 두개다. [1]"동적 값을 어떻게 요청할 것인가" , [2] "동적 데이터를 어떻게 응답 할 것인가"

      "동적 데이터 요청" 은, 무한증식하는 리스트를 만들었을때, "버튼 함수를 달아 줄 경우", 

          "func.bind()" 를 "부분적용" 방법을 사용하여, "아규먼트를 고정시킨 후 사용"한다. ".bind(null, arg1)"
          
            * bind() 에 대한 설명은, [0.REACT-JAVASCRIPT.txt , 자바크스립트,  10번 참조]

      "동적 데이터 응답" 은, API에서, 받은 동적 URL 값을, "req.query" 로 뽑아와서, 
      
          전체 데이터에서 필터처리 혹은 find 혹은, 데이터베이스의 구문 등으로, 걸러서 값을 돌려준다.

  8. API의 구조화 : 폴더를 잘 사용하여, API를 구조화하자

  9. ... 를 사용한 동적 API : 역시나 가능하다 PAGE 쓸 때랑 다 똑같다 
    




