[데이터 페칭]

1. 기존 리액트앱의 문제점

    <기존>
        브라우저의 모든 설정이 끝나고 - HTTP 요청을 보내 - 값을 가져와 - 로딩하고 - 렌더함

        ==> 초기에 아무런 데이터도 없는 빈 깡통의 HTML 컨텐츠를 로드함
        
        단점:
            1. 데이터 로딩이 매우 오래 걸림
            2. SEO에 문제가 큼. 로딩되고 렌더될때까지, 아무런 컨텐츠를 볼 수  없으므로, 유저들에게 검색이 되지 않음

    <데이터 페칭을 하려면>

    값을 가져와서 로딩을 하고 렌더한 이후!

    렌더를 다 한 이후! 데이터 페칭이 들어가기 때문에,

    실제 DB에 있는 값을 그때 가져올 수 있고,

    "유저들에게 검색 되어야 하는 컨텐츠"들은 "렌더 이후 가져와야 하는는 데이터들"인데 그 값이 없으므로,

-   [검색이 될 수 없다]

    ==> Next.js 는 "사전 렌더링"을 통해 이 문제를 해결한다.

2. 사전 렌더링

    <React>
        HTTP 요청 --> 라우트 도착 --> [빈 HTML 파일 + 자바스크립트 파일] --> [자바스크립트가 실행되면 데이터 렌더]

    <NEXT.js>
        HTTP 요청 --> 라우트 도착 --> [사전 렌더링된 "완벽한 HTML" 페이지 전송 (컨텐츠만 있는 완벽한 HTML) ]
                                 --> [ 자바크스크립트 재전송(Hydrate) => 모든기능이 있는 웹사이트 ]  --> [사전 렌더링된 페이지와 교체됌 (완벽한기능의 웹사이트)]

        ** 사전 렌더링은 "최초 접속한 페이지" 에 한해서, 적용된다.
         ==> "React가 준비되는 동안", "빈페이지 대신"에, "사전 렌더링된 HTML 페이지"를 보여주는 것이다.

        ** 사전 렌더링이 끝난 이후에는, React가 모든 것을 통제하며, Single Page 의 역할을 다한다.
         ==> 한번 로드되고 나면, 다른 페이지로 들어갈때, 사전렌더링 되지 않고, React가 움직인다.

3. 사전 렌더링의 두가지 종류 [ 둘 중 택 일]

    <Static Generation (정적 생성)> - "일반적으로 권장됌"

        : 빌드되는동안 "모든 페이지가 사전생성"
            => 배포전에 모든 페이지가 준비됌

    <Server Side Rendering (서버 사이드 렌더링)>
        : 배포 후, 요청이 오면 그때 모든 페이지가 생성됌


4. Static Generation

    배포되고 나면 "구축된 페이지"는 "서버나 앱을 실행시키는 CDN" 에 의해 "캐시로 저장"된다.

    => 요청이 오면 바로바로 실행될 수 있게 준비되어있음

    사전 구성된 페이지가 표시되고 나면,  React 의 "Hydrate"(자바스크립트 재전송) 을 통해, React 앱이 됌

    <어떤 페이지를 사전 생성해야할지 "어떻게" Next.js 에게 요청할것인가 >
    <사전 생성될 페이지에는 "어떤 데이터가 포함되어야 할지" 어떻게 지정할 것인가?>

-   ==> "반드시" "PAGES 폴더"에 있는 COMPONENT에서

-       export async function getStaticProps(context){ ... }

        함수를 실행시킨다.

5. export async function getStaticProps(context){ ... }

    : 사전 렌더링 중에서, Static Generation(정적 생성) 타입의 사전 렌더링시 사용되는 코드


    <특징>
        ** 이 안에 적은 코드는 "클라이언트 사이드" 뿐 아니라, 일반적으로 "서버사이드에서 실행되는 모든 코드" 들도 실행 할 수 있다.
        
        ** 또한, 이 함수 내에 작성한 코드는
-           "Hydrate(자바스크립트 재전송)되는 코드에 포함되지 않는다".
            즉, 해당 함수에 적은 코드는 "클라이언트는 볼 수 없다"

-           ==> DB credential(자격증명) 가 포함되어 있는 경우, "클라이언트 사이드에 노출시키지 않기 위하여, 이 코드 안에 적으면 보안이된다."

        


