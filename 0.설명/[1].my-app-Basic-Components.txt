[INDEX]
1. class의 추가
2. component 의 사용법
2. component 안의 값에, {} 를 넣고 입력하면 javascript code 가 된다.
3. component 를 불러올때, "동적 컨텐츠"를 넣기 - props 의 활용      
4. 이벤트 처리하기
5. React Hook 의 사용
6. component 안의 retrun(HTML CODE 같은 것들) 안에, "조건부 렌더 사용하기"  => "삼항연산자와 && 연산자"
[5~6 정리 : 버튼을 눌렀을때, State를 변화시키고, 원하는 페이지를 렌더하기]
7. 불러온 component : <BackDrop /> 에, 정의한 함수 작동시키기
8. 여러개의 props.변수 안에 각각 다른 값 집어넣기


========================================================================================================================================

<코딩 시작>=======================================================================================================================

1. class의 추가, <label for 대신 쓰는 htmlFor>
    className =" "
    
    <label htmlFor="title">
    <input type="text" id="title">

2. component 의 사용법

    1. component 를 만들고, export default 한다. ex) 함수이름  Todos
        * 함수이름은 반드시! 첫글자가 대문자다.

    2. 사용할 곳에, 셀프 클로징 태그 "/"를 사용하여 붙여넣는다 ex) <Todos/>
        * 열고닫는 태그<Todos></Todos> 도 괜찮다.

    3. import Todos 를 치면 알아서 자동완성된다.

        <사용하는쪽 코드>

-       import Todos from "./components/Todo";

        function App() {
        return (
            <div>
-           <Todos />
            </div>
        );
        }
        
        export default App;

    4. 필요한만큼 복사하여 붙여넣는다.
    
2. component 안의 값에, {} 를 넣고 입력하면 javascript code 가 된다.

    : component의 안에, "{} 를 사용"하면 "{} 안의 값은 javascript code 로 인식"한다.
        하지만, "{} 안에 () 를 사용한 표현식은 불가능"하다.
        
        ex) <p> { 4+4 } </p>        => 가능
        ex) <p> { if(...) } </p>    => 불가능

3. component 를 불러올때, "동적 컨텐츠"를 넣기 - props 의 활용

    1. "보내는 쪽 함수의 프로퍼티에, props 를 추가"(굳이 props 일 필요는 없다) 
        하고 그 안의 태그에, porps 객체에 접근해, 키를 넣는다. 
        
-       function Todos(props) {
            return (
              <div>
-               <h1> {props.text}</h1>
                <div className="card">
    
    2. "받는쪽에서 Todos 를 사용할때", "객체의 키에 접근해, 값을 동적으로 넣어준다." 
        
        import Todos from "./components/Todo";

        function App() {
        return (
            <div>
-           <Todos text="wow" />
-           <Todos text="this is" />
-           <Todos text="props effect" />
            </div>
        );
        }
        
        export default App;
        
4. 이벤트 처리하기

    1. 이벤트 리스너 달기

        : 이벤트 리스너를 사용할때에는, 일반적인 자바스크립트와는 다르게,
-           버튼이나, 태그 안에 직접 "onClick", "onChange" 등의 "on" 접두사를 붙인, 리스너를 달게된다.
            * on은 소문자 이벤트 이름의 첫글자는 대문자 임을 주목
        
    2. 이벤트 리스너에 함수 달기
        : 이벤트 리스너에 {} 를 만들어, 
            직접 함수를 적거나  onClick ={ function(){ ... } }
            화살표함수도 괜찮고 onClick ={ () => { ... }}
-           외부에 함수를 정의한 것을 가져온다. onClick = {}

    3. 외부 함수 정의
        : "외부 함수 정의 위치"는, "component의 함수 안", "return 위에 정의"한다. 

        function Todos(props) {
-           function deleteHandle() {
                console.log("click!")
-               console.log(props.text)
            }
            return (
-               <button className="btn btn-primary" onClick={deleteHandle}>

    ==>     "외부 함수"는 말그대로 "함수이다". "props 라는 파라미터를 사용하여, props.text 를 쓸 수 있다".
    ==>>     당장은 "props.text" 를 정의하지 않았지만, "외부에서 불러오며" "props.text 를 정의해주니, 사용가능"하다.
    ==>>>     자바스크립트처럼, 함수를 정의해놓고, 외부에서 꺼낼때마다, 파라미터(argument)에, 동적인 값을 집어넣으며 사용하는 것과 같다.

   **[주의사항] delete 등의 간단한 이름으로 함수를 짜면, 다른 내부 메서드와 충돌을 일으킬 수 있으니, 충분히 기능적인 이름으로 이름을 만들자.

5. React Hook 의 사용
    간략한 이론 : 위의 <용어> "설명 6번의 react hook" 볼것

    [1. 설명 => useState Hook (상태를 관리하는 hook)]

        : useState Hook 은 "현재의 상태" 를 나타내며, "import 후, 초기값을 설정하여 사용가능하다. "
            "useState(초기값)" 은 "두 개의 값을 가진 배열을 반환"하며,

            반환된 배열중 첫번째 값은, 현재의 상태
                        두번째 값은, 이후의 상태를 어떻게 할지
            를 반환한다.

    [2. 사용]

        : HOOK은 "컴포넌트 함수 안"에서, "괄호 안이 아닌 곳" 즉, "최상단에만 사용가능"
            , 반환되는 "하나의 배열 변수안의 두 값"를 "각각의 변수에 저장하여 사용" 가능
        
-       import {useState} from "react"

        function Todos(props){
-           const [modalIsOpen, SetModalIsOpen] = useState(false)
        }


6. component 안의 retrun(HTML CODE 같은 것들) 안에, "조건부 렌더 사용하기"  => "삼항연산자와 && 연산자"

    : 앞서 retrun 안에 동적인 값을 사용하려면 {} 를 사용한다고 했고,
        "{} 안에는 () 를 쓸 수 없어"서," if ()" 따위가 불가능 하다고 했다.

    => 그러므로, "삼항연산자", 혹은, "&&" 를 이용한다.

-   <일반식> - {} 안에 쓰기 불가능

        if(modalIsOpen){
            <Modal />
        }

-   <삼항 연산자> - {} 안에 쓰기 가능

        { modalIsOpen ? <Modal /> : null}
        => 이것이 "?" (참이면), <Modal /> 을 렌더하고 ":" (아니면), 아무것도 하지 않는다.
        
-   <&& 연산자> - {} 안에 쓰기 가능

        { modalIsOpen && <Modal/>}
        => "두 조건이 모두 참"이면 "뒤에 것을 retrun 한다."


[5~6 정리 : 버튼을 눌렀을때, State를 변화시키고, 원하는 페이지를 렌더하기]

-   import { useState } from "react";                          ==> useState Hook 을 import 한다.

    import Modal from "./Modal";                               ==> Modal 과 BackDrop 을 가져오고
    import BackDrop from "./BackDrop";

    function Todos(props) {
-   const [modalIsOpen, setModalIsOpen] = useState(false);      ==> useState 의 초기상태(false) 를 정의하고, return 값을, 빼낸다.

    function deleteHandle() {
-       setModalIsOpen(true);                                   ==> 만약, 이 함수를 실행하면, "modalIsOpen이 true" 가 된다.
    }
    return (
        <div>
        <h1> {props.text}</h1>
        <div className="card">
            <p>Hello!</p>
            <div className="btn-section">
            <button className="btn btn-primary" onClick={deleteHandle}>
                Delete
            </button>
            </div>
        </div>
-       {modalIsOpen ? <Modal /> : null}                        ==> modalIsOpen 이 true이면, <Modal /> 을 return
-       {modalIsOpen && <BackDrop />}                           ==> modalIsOpen 이 true이고, <BackDrop /> 이 있다면, <BackDrop />을 return
        </div>
    );
    }

    export default Todos;

7. 불러온 component : <BackDrop /> 에, 정의한 함수 작동시키기
    
-   원리 : Todos 를 불러온 후에, Todos.js 안에 props 파미터를 넣어, props.text 를 동적인 값으로 넣었을 때를 기억하자

        [보낸 컴포넌트]
            <div>
            <h1> {props.text}</h1>

        [받은 컴포넌트]
        <Todos text="wow" />

    ==> 함수를 실행시키려면, "보내는 컴포넌트"안에, "직접 실행될 곳"에 "리스너를 달고", "리스너의 값을 파라미터로 처리" 한 후에,
        "불러올때, 함수를 넣어"주면된다.

    [보낸 컴포넌트]

        function BackDrop(props) {
-           return <div className="back-drop" onClick={props.closeFunction} />;
        }
        export default BackDrop;

        ==> "실제로 실행될 곳"에, "onClick 리스너"로, "props.closeFunction" 이라는 함수를 실행할 준비를 하고
      

    [받은 컴포넌트]

-       function cancelButton() {
            setModalIsOpen(false);
        }

        ...

        {modalIsOpen ? <Modal /> : null}
-       {modalIsOpen && <BackDrop closeFunction={cancelButton} />}

        ==> "받아올 곳에서, 컴포넌트를 받아올때" closeFunction 이라는 곳에, cancelButton 함수를 넣어준다.


    <또다른 방법>=========================================>=========================================>=========================================
        : 이 방법은, "props.변수" 는 "모든곳에 사용 가능함"을 알려준다.


    [보내는 컴포넌트]
        function Modal(props) {
            
            function cancelHandler(){
-           props.closeFunction()
            }
            return (
                <div className="Modal">
                    <p>Are you sure?</p>
                    <div>
-                   <button className="btn btn-secondary" onClick={cancelHandler}>

    [받는 컴포넌트]

-       function cancelButton() {
            setModalIsOpen(false);
        }

        ...

-       {modalIsOpen ? <Modal closeFunction={cancelButton} /> : null}


    ==> "보내는쪽 함수의 실행문"에," props.closeFunction()" 를 적고,
        "받는 쪽 컴포넌트"에서 closeFunction={cancelButton} 실행함수를 넣어, 실행되게 만들어도 올바르게 작동된다.


8. 여러개의 props.변수 안에 각각 다른 값 집어넣기

    <Modal text={} fruit={} name={} .../>

-   여러개 집어넣으면 된다.



>=========================================>=========================================>=========================================
    [여기까지가 my-app], 이후로는 [my-app2]
>=========================================>=========================================>=========================================

        



                




    
        

    

