[0. 리액트-자바스크립트]========================================================================================================================================

Hook 모음집
1. "useState" HOOK
2. "useRef" HOOK
3. "useHistory" HOOK [react-router-dom 패키지]
4. "useEffect" HOOK
5. "createContext , useContext Hook"

자바스크립트
1. .push() && .concat() 의 차이 [배열 안의 값 삽입]
2. filter   [배열 안의 값을 filter]
3. some [ 무언가 하나라도 참인가? ] : 값이 배열내에 존재하는지 확인하는 함수로 자주쓰이는
4. import 할때, [{ } 안에서 import 되면, 그 안의 함수가] , [그냥 이름으로 import 하면 파일 자체]가 import 된다.
    

[3.my-app-Basic-Components]========================================================================================================================================

1. class의 추가
2. component 의 사용법
2. component 안의 값에, {} 를 넣고 입력하면 javascript code 가 된다.
3. component 를 불러올때, "동적 컨텐츠"를 넣기 - props 의 활용      
4. 이벤트 처리하기
5. React Hook 의 사용
6. component 안의 retrun(HTML CODE 같은 것들) 안에, "조건부 렌더 사용하기"  => "삼항연산자와 && 연산자"
[5~6 정리 : 버튼을 눌렀을때, State를 변화시키고, 원하는 페이지를 렌더하기]
7. 불러온 component : <BackDrop /> 에, 정의한 함수 작동시키기
8. 여러개의 props.변수 안에 각각 다른 값 집어넣기

[4.my-app2-Router-DataFetch]========================================================================================================================================

0. Router page와 Component
1. Router의 사용 : React 의 사용 이유
2. router 타사 패키지의 설치 [강의를 위해 5버젼 설치]
3. Router 는 URL에 따라, 변화하는 페이지를 구현한다.
4. Router 페이지의 구현 세팅
5. Router 페이지의 "구현경로 생성" 및 "경로에 따른 페이지 렌더" [ Route ]
    * TIP.  코드에 [import {} from ""] 이렇게만 치면, "" 에 자동완성이 생기고, 그 후에 { } 안에 자동완성된것중에 찾으면 편하다.
6. 왜 이렇게 하고, URL을 입력했는데, 중첩된 페이지가 두개씩 렌더되는가? [ Route 의 구동원리] 
7. 정확히 URL 이 일치하는 페이지만 로드하기 [ Switch, exact ]
8. URL 변경하는 버튼 만들기 [ 앵커태그 아니고 Link]
9. Link 만들기  [<Link to=""> </Link>]
10. CSS 가 적용되는 원리, 적용시키는 두가지 방법
11. 반복 배열문 만들기, "{[<li>item1</li>, <li>item2</li>, ...]}" 그리고, " .map() " => 무한증식 배열의 기초
12. Component 에서 "List"와 "Items" 만들기
    [Array.map( (xxx) => () ) , Array.map( (xxx) => { return xxx...}) 둘의 차이점에 대하여]
13. div 가 아닌, [스타일을 설정한 Layout, Card ]를 통하여, Card 형식의 컨텐츠들을 통일시켜 관리하기 [**props.children]
14. 기본적으로 React 에서 양식을 만들때는, [양식 전체를 감싸는 Card component]와 [그 안에 들어가는 form component] 를 만들어 사용한다.
15. <input type="url"> [URL 을 담는 input type]
16. 다시 말하는 Layout 의 장점
17. 폼에 입력된 값 처리하기 - React 로, Form Data 받고, 처리하기 [ref , useRef]
   
18. 폼에 입력된 값 처리하기 - React에서, DB 로 POST 하기 [자식(실제데이터있는)에서는 함수를 실행하고, [함수 실행문은 부모측에서 동적으로 넣어주기]] 
    부제 : "자식이, 함수형 props" 를 "부모로부터 함수 실행문을 받아" "실행시키는 방법"

19. POST 요청을 전달한 이후, 페이지를 빠져나오기 [ useHistory Hook ]
20. 페이지가 렌더될때마다, DB의 데이터를 가져오는 "Data Fetching" 하기 [useState, useEffect HOOK ]
[extra. 헷갈릴 수 있는것 바로잡기]
21. Context 다루기 [ store 폴더에서, 전역으로 사용가능한, component] , [createContext , useContext HOOK]

========================================================================================================================================