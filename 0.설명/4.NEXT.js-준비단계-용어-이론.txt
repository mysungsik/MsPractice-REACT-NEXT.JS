0. React 란 무엇인가?

    사용자 인터페이스 (UI) 구축을 위한, JavaScript "라이브러리" 이다.
        => javascript 만으로는 구축이 힘든 것들을 도와주는 "라이브러리"이다.

1. Next js 는 무엇인가

    : React 상에 구축된 "framework" 이다. "Full Stack framework"
        * "framework" 는 " 라이브러리" 보다 크다. 기능도 많고
            또한, framework는 "어떻게 코드와 파일을 구축할지 정확한 가이드라인을 지켜야만한다".

    
    : 결국, "Next.js" 는, React에, "다양한 기능을 추가해주어", React 를 강화시켜준다.

        ** 가장 핵심 기능은, "서버 측 (사전)렌더링" , "파일 기반 라우팅" 이다.


2. React 만으로 꾸몄을때의 큰 문제점

    1) "화면 깜빡임 현상 "(고칠수는 있지만)
        : 클라이언트 측에서," JavaScript 코드가 실행 된 후"에, "데이터페칭이 시작" 되므로,
        요청된 "페이지에, 아직 데이터가 전송되지 않아서" 발생

    2) "SEO (검색 엔진 최적화) 문제" [ 물론 역시, 고칠 순 있지만 복잡]
        : REACT 는 index.hmtl 의 root 태그에, 모든 태그들이 뭉쳐서 나온다.
            문제는, 검색을 하려는데, 나오지 않는다.

            "사용자들은 아직 완성된 페이지를 로드하지 못했기 때문에" 비어있는 index.html 파일의 코드 몇줄 만 볼 수있는것이다.

        => Next.js 는 , 서버사이드 사전 렌더링을 통해, 완성된 페이지를 미리 제공함으로서,
            검색을 용이하게한다.

3. File base Routing

    "pages" 라는 폴더를 통해, Next.js 는 페이지를 지원한다.

4. Backend 작업이 간편해진다.

    REST API 와 결합하기 아주 쉬워진다.

<준비단계>=======================================================================================================================

1. node.js 설치, Next.js 설치

    npx create-next-app@latest 

    https://nextjs.org/docs
        
2. 시작 (package.json 참조)

    npm run dev

3. 시작하면, 사전렌더 덕분에, 페이지소스를 보게되면, 파일이 전부 보인다.

    React 처럼, index.html 에, root 태그 하나만 있는것이 아니라," 코드가 전부 찍혀나온다".

    ==> 이후, 검색당하기 좋을것이다.

<기본파일분석>>=======================================================================================================================

1. public 폴더에 index.html 파일이 없다!

    : 내장된 "사전 렌더링 기능" 때문이다.
        요청이 서버에 도착하면, 알아서 렌더될것이다.

    => 곧," 언제 사전 렌더링이 될지" 결정 할 수 있고, 

2. pages 폴더 ***

    : 파일 기반 라우팅이 될것이기에, 아주아주 중요하다

    