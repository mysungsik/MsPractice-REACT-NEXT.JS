< Static Generation >======================================================================================================

1. 시작하기에 앞서, Next.js 는 기본적으로 "정적 코딩된 페이지를 사전렌더링한다."

    : 페이지를 열고, "페이지 소스보기"를 누르면

    클라이언트에 요청에 의해 "서버에서" 받은 "실제 응답" 이라는 점을 기억하자

    ==> 이 컨텐츠를 "검색엔진이 보는것이다."

-   ** Next.js는 , "기본적으로", 동적인 데이터가 아닌 "정적 코딩된 페이지"들을 "사전 렌더링한다."


2. 그렇다면 무슨 이유로 사전 렌더링을 하라고 지시할까? ***

    : 이후, 사전 렌더링이 되지 않게 만들것인데,
        그 중 무엇이 사전 렌더링이 되게 만들지, getStaticProps 함수로 지정 할 수 있다.

-   또한, 컴포넌트를 구성해야하는 데이터파일을 "미리 불러와서 컨텐츠를 구성 할 수 있다"

3. getStaticProps 함수는

    1. 반드시 "PAGES 파일" 안에서 사용되어야 하며, "모든 PAGES 파일" 에 추가 가능하며
    2. EXPORT 해야 쓸 수 있다.
    3. getStaticProps 함수 안에 쓴 코드들은 [서버측에서 실행된다.] "console.log( ) 백날 찍어도 터미널창에서 나온다."

4. "데이터 페칭" 이 도대체 무엇인가?

    : 말 그대로, 데이터를 가져오는 행위이다. [ 서버로부터 ].
        localhost 서버일수도, DB 서버일수도


==== <시작 데이터 페칭> ====

1. [getStaticProps 의 사용] - [컴포넌트를 생성하기도 전]에, [컴포넌트를 사전 렌더하기도 전]에, [데이터를 PRE-FETCHING 하기] 
    페이지가 로드되고 난 이후, 요청되는 HTTP 요청이 아니라, 미리!

    <코드>
        function HomePage(props) {
-           const {product} = props;         // 객체 분해구조를 통해, product 키를 추출

            return (
            <ul>
                <li> Product1 </li>
                <li> Product2 </li>
                <li> Product3 </li>
                {product.map((item) => (
                <li key={item.id}> {item.name}</li>
                ))}
            </ul>
            );
        }
        
-       export async function getStaticProps() {
-           return {
-           props: {
                product: [
                { id: "product1", name: "productName1" },
                { id: "product2", name: "productName2" },
                ],
-           },
-           };
-       }
        export default HomePage;
      
       ==> "getStaticProps 함수"는 말 그대로, "props" 를 미리 준비하는 것이다.

        그러므로, 
-       첫째로, getStaticProps 가 먼저 실행되어, props 파라미터 값이 채워지면, ==> [데이터페칭]
-       둘째로, 메인 컨텐츠인, HomePage() 함수가 props 가 채워진 채로 시작되는 것이다.

        ==> getStaticProps 는 함수 이름 그대로 "props 객체"를 "return" 하며 "클라이언트에서는 절대 볼 수 없다."
        
            export async function getStaticProps() {
                return {
                    props:{ }
                }
            }

        * 주의할점 : getStaticProps 함수는 "return" 할때 "중괄호를 사용"한다.


2. 데이터 페칭 후, getStaticProps의 특징에 대해 확인

    : 데이터 페칭 이후, 데이터 소스를 보게되면, "모든 값이 잘 찍혀나온다."

            잉? javascript 파일도 잘 나오는데..?

-   localhost:3000 에는 안나오는데
-   _N_E 에는 잘나온다. 왜지?

    알수가없네

3. 자바스크립트에서는 할 수 없는 fs(file system) 에 접근하여, 데이터를 불러오기
    * fs 복습
    * path 복습
    
        const jsonData = await fs.readFile( 파일위치 )
        const path = path.join("폴더이름","폴더이름"..."폴더이름", "파일이름")

    =============

        export async function getStaticProps() {
-           const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
-           const jsonData = await fs.readFile(filePath);
            const productData = JSON.parse(jsonData);
  
            return {
            props: {
                product: [
                { id: "product1", title: "productName1" },
                { id: "product2", title: "productName2" },
                ...productData.products,
                ],
            },
            };
        }
        export default HomePage;
    =============

-   ** 중요한 점은, Next.js 가 코드를 실행 시킬때, [모든 파일이 루트 폴더에 있다고 생각하고 실행시킨다]

        그러므로, process.cwd() 는, 가장 루트 폴더가 되는것이다.

            * cwd = current working directory : 현재 사용중인 폴더를 위치로 한다.


4. npm run build [배포파일 생성] 에 대하여

    : npm run build 를 통해, 프로덕션용 파일을 생성한다.
        생성된 파일에는, html 파일, ... 등등 해서 많은 파일이 존재할 것이고

        이는 [정적인 사이트를 구축할 때는 참 괜찮을 것이다.] ex) 블로그 등...
        정해진 데이터에, 정해진 파일을 화면에 표시하는것 뿐이니까.

-       그렇다면, 동적인 사이트를 구성할때는 어떨까?
        가령, 데이터가 계속해서 변하는 그런 사이트

-       매번, npm run build 로, 새 배포파일을 만들고, 배포하고, 바뀌면 다시 npm run build 를 하고 다시 배포하고...
            할 수 없을것이다.
        
    ==>> ISG (Incremental Static Generation) 을 사용한다.
            
5.  ISG (Incremental Static Generation) 증분 정적 생성 [revalidate]

    : 페이지를 빌드할때, 정적으로 한번 생성하여 배포하는 것이 아니라, 계속 해서 업데이트 되는 데이터를 가지고 재생성함.
        재배포 없이

        * 내가 "설정한 시간"마다 "페이지는 재생성(다시 사전 렌더링)" 되며, 사용자는 재생성된(업데이트된) 페이지를 볼 수있고,
            재생성된 페이지를 가지고 시작할 수 있다.

    ** 재 배포에 관하거나, 페이지가 정적이라는 말이 아니라,
-       "사전 렌더링"이 "옛 데이터를 가지고 되냐", "업데이트 된 데이터를 가지고 되냐" 의 싸움이다.

    =============

        export async function getStaticProps() {
            console.log("Re-Generate");
            ...

            return {
                props: {
                    product: [
                    { id: "product1", title: "productName1" },
                    { id: "product2", title: "productName2" },
                    ...productData.products,
                    ],
                },
-               revalidate: 10,
            };
        }
        export default HomePage;

     =============

     ==> "revalidate : XX second" 를 통해서, 배포된 페이지가 얼마나 자주, 재생성 될지 정할 수 있다.

        자주 바뀌어야 하면 짧게(1), 자주 바뀌지 않아도 되면 길게 잡자(600) 정도?

6. 빌드 하고 나면 보이는 현상

    Route (pages)                              Size     First Load JS
-   ┌ ● / (ISR: 10 Seconds)                    321 B          72.5 kB
    ├   /_app                                  0 B            72.1 kB
    └ ○ /404                                   181 B          72.3 kB
    + First Load JS shared by all              72.4 kB
    ├ chunks/framework-8c5acb0054140387.js   45.4 kB
    ├ chunks/main-d2a793b6dc23a82a.js        25.7 kB
    ├ chunks/pages/_app-b982fa09370b0414.js  284 B
    ├ chunks/webpack-8fa1640cc84ba8fe.js     750 B
    └ css/ab44ce7add5c3d11.css               247 B

    ○  (Static)  automatically rendered as static HTML (uses no initial props)
-   ●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)
-       (ISR)     incremental static regeneration (uses revalidate in getStaticProps)

        SSG : 사전렌더링시, getStaticProps 으로 인해, 데이터가 들어가는 것, 혹은 그런 페이지 ( SSG page) "Static Site Genertation"
        ISR : revalidate 조건으로 인해 발생하는, 재생성 
-           ** 위의 ┌ ● / (ISR: 10 Seconds)  를 보면 regeneration이 10 SECONDS 마다 발생한다고 잘 써있다.

7. 어떻게, Revalidate 되었는지 알 수 있을까? [ npm start 로, 서버사이드에서 시작  // dev 서버가 아니고 진짜 "서버"]

    export async functiongetStaticProps(){
        return {
            props: {
            },
-           revalidate : 10
        }
    }

-       "revalidate: 10" 으로 지정했으므로 매 10초마다, 사전렌더링되는 사이트는 10초마다 재생성된다.

        어떻게 알까?

    1. 빌드 후에, "npm start" 를 통해서, dev 서버가 아닌, "실제 서버를 연다".

    2. "만약 dev 서버"라면 당연하게도 "사이트를 새로고침 할 때마다, 새로운 값을 다시 재생성" 할것이므로, 
-       console.log() 안에 쓴 값이 계속해서 터미널 창에 표시될 것이다.

    3. "진짜 서버" 에서는, 10 초마다만 재생성 되므로, "아무리 사이트를 새로고침 한 들, 10초마다만 재생성"되어
-       매 10초가 넘어야 "새로고침 했을때 console.log() 안의 값이 표시될것이다." 

8. export async function getStaticProps(){} "retrun" 의 "몇가지 키"들 [props, revalidate, notfound, redirect]
    : 대부분 "페칭에 실패" 했을 경우 사용하는게 대부분이다.

    <KEYs>
        1. props : 사전 렌더링할 때, 컴포넌트 안에 들어갈 값을 미리 [데이터페칭] 한다.

        2. revalidate : 빌드 했을 때, 사이트를 재생성 하는 주기를 표시한다. (ISR)

-       3. notfound : Boolean 값으로 설정하며, true 의 경우, 404 페이지가 표시된다.

        4. redirect : "객체값" 으로, destination 키를 이용해, "이동할 라우터를 선택한다."

    <사용 예시>
        : 데이터 페칭에 실패할 경우

-       export async function getStaticProps(){

            const filePath = path.join(process.cwd(),"data","xxx.json")
            const fileJsonData = await fs.readFile(filePath)
            const fileData = JSON.parse(fileJsonData)

            if(!fileData){
-               retrun {notFound : true}
            }

            if(!fileData.products.length ===0){
-               return { redirect : {
-                   destination : "/no-data"
                }}
            }

            retrun {
                props: {
                    ...
                }
                revalidate : 10
            }
        }

    ** 대문자 소문자 조심!! "notFound" 이다\

9. useEffet 를 사용해서, 초기 렌더시 데이터 값을 가져오면 안될까? [ useEffet를 사용하는 곳, getStaticProps 를 사용하는 곳]

    : 가능하다. 다만 "검색엔진은 그 값을 볼 수 없다."

    useEffet 는, "자바스크립트가 모든 컨텐츠를 불러 온 이후", HTTP 요청을 통해(혹은 파일 내의 요청), 데이터를 가져와서 FETCHING 한다.
    
    "검색 엔진이 보기에는 이미 늦은 시점이다".

    *****   <일반적인 경우> "동적인 페이지"에 "useEffet 를 사용해", "데이터를 페칭"하는 것이 맞지만,
            < 사용자들에 의해 검색되거나, 반드시 들어가는 페이지> 에 한해서, "동적인 페이지의 사전 렌더링을 하는것이 타당하다"

10. getStaticProps(context){} 에서 "context" 를 활용하여, 동적 값 추출하기 [context.params] 마치, useRouter의 query, 그리고 [오류]
    : 부제, [특정 조건을 통해 특정 데이터를 뽑아] ProductDetail 을 표시하기


    1. "context.params" 와 "useRouter.query" 의 "공통점"
        : 둘 모두, 동적 페이지 [] 에 입력된 동적 URL 값을 읽어 온다.

**  2. "context.params" 와 "useRouter.query" 의 "차이점" 

        : [useRouter.query] 는 "컴포넌트 내부에서", 즉, 브라우저에서만 이루어진다.

        : [context.params] 은 "사전 렌더링 전에 이루어지므로" "컴포넌트 함수보다 먼저 실행되고"
                                "서버사이드에 실행된다." 

-          ** 아니 애초에," getStaticProps 함수는 서버측에서 실행된다."

    ============================

    < 위치 > : pages/[productid].js
    
    < 사용 >
   
        import { Fragment } from "react";
        import fs from "fs/promises";
        import path from "path";
        
        function ProductDetail(props) {
            const { loadedProduct } = props;
            return (
                <Fragment>
                    <h1> {loadedProduct.title}</h1>
                    <p> {loadedProduct.description} </p>
                </Fragment>
            );
        }
        
-       export async function getStaticProps(context) {
-           const { params } = context;
            const inputId = params.productid;   //params.[동적페이지Key]
            
            const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
            const jsonData = await fs.readFile(filePath);
            const productData = JSON.parse(jsonData);
            
            const product = productData.products.find((item) => item.id === inputId);
            
            return {
                props: {
                    loadedProduct: product,
                },
            };
            }
        export default ProductDetail;

    ============================

11. Error: getStaticPaths is required for dynamic SSG pages and is missing for '/[productid]'. "사용하려고 하니 나오는 오류" [동적페이지와 사전 렌더링 사이의 관계]

    < 설명 > 
        : getStaticPaths 를 사용하려면, 동적인 SSG pages 가 필요하다
            * SSG : Static site Generation

    < 오류 이유 >
-       1. "동적 페이지" [ ex) [xxx].js ... ] 는, "NEXT.JS의 기본 동작"으로 "사전 생성되지 않는다" => 사전 렌더링 하지 않는다

        2. 그 이유는, "동적 페이지"를 얼마나 많이 만들어야 하는지, 어떤 데이터가 어떤식으로 들어가는지, NEXT.JS 는 알 수 없기 때문에,
            "동적 페이지"는 "그때그때", "생성하는 것이다."

        ==>  "얼마나 생성되어야 하는지 모르는" "동적페이지" 라서, 그때그때, "상황에 맞춰 페이지를 생성"해야하는데,
            getStaticProps 로 인해서, "사전생성 해달라는 요청을 받은 것이다."

    < 해결 방법 >

        "Next.js" 가 "어떤 데이터를", "어느 정도의 양을" 만들어야 할 지 몰라서 "사전 생성을 하지 못하는 오류이므로"

        알려주면 된다. 그 양식을

-       "export async function getStaticPaths(){} 함수"를 통해서

12. export async function getStaticPaths(){} 함수 [동적 페이지와 사전 렌더링과의 관계2]
    : "무엇을", "몇개나" 사전 렌더링 할지 알려주는, "getStaticPaths(){}"

        export async function getStaticPaths() {
            return {
                paths: [
                    { params: { productid: "p1" } },
                    { params: { productid: "p2" } },
                    { params: { productid: "p3" } },
                ],
                fallback: false,
            };
        }

    ** "retrun 의 Key"로, "paths" 와, "fallback" 존재하며,
        "paths" 는, "배열 객체로", 
            배열 안에 객체 키로 params 를 사용하며
            params 안에는, 객체 형태로 [받는 동적 key( 동적파일이름)], ["받을 정확한 값"] 을 넣는다
        "fallback" 에는 일단 false 를 넣는다 [추후 알아보자]

    ==>> 이렇게 되면," params 안에 들어갈 정확한 값들이 정해지고", Next.js 는 "어떤 동적인 값을 사전 렌더해야 하는지" 알게되어,
-           사전 렌더링이 성공적으로 이루어지게 된다.

13. 이대로 다시 build 를 해보자

    C:\Users\audtl\OneDrive\8.REACT-Next\static-generation-app>npm run build

    > static-generation-app@0.1.0 build
    > next build

    info  - Linting and checking validity of types  
    info  - Creating an optimized production build  
    info  - Compiled successfully
    info  - Collecting page data
-   [    ] info  - Generating static pages (0/6)Re-Generate
-   info  - Generating static pages (6/6)
    info  - Finalizing page optimization

    Route (pages)                              Size     First Load JS
    ┌ ● / (ISR: 10 Seconds)                    321 B          72.5 kB
    ├   /_app                                  0 B            72.1 kB
    ├ ● /[productid] (614 ms)                  329 B          72.5 kB
-   ├   ├ /p1
-   ├   ├ /p2
-   ├   └ /p3
    └ ○ /404                                   181 B          72.3 kB
    + First Load JS shared by all              72.4 kB
    ├ chunks/framework-8c5acb0054140387.js   45.4 kB
    ├ chunks/main-d2a793b6dc23a82a.js        25.7 kB
    ├ chunks/pages/_app-b982fa09370b0414.js  284 B
    ├ chunks/webpack-8fa1640cc84ba8fe.js     750 B
    └ css/ab44ce7add5c3d11.css               247 B

    ○  (Static)  automatically rendered as static HTML (uses no initial props)
    ●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)
    (ISR)     incremental static regeneration (uses revalidate in getStaticProps)
            
    ==>> 6 개의 사전 렌더링 페이지가 준비되어 있는 것이 확인 되고
    ==>> 각각은 .next/server 폴더에 들어가면, 확인 할 수 있다.

-   ==>> build 후에, npm start 로 서버측에서 실행시켜보면,
        "네트워크 탭" 에서, "p1.json", "p2.json" ... 으로 파일들이 사전 렌더링 된 것을 확인 할 수 있다.

14.  [동적인 페이지를 사전렌더링 하는 기준] + [만약 특정 동적 페이지만 사전 렌더링 하고 싶다면?]

    < 동적인 페이지를 사전렌더링 하는 "장점">
        : "동적인 페이지" 라 할지라도 "사전렌더링" 을 통해, "사용자들에게 검색을 당할 수 있음"
        :  사용자들이 자주 들어가는 페이지라면, 이미 사전 렌더 되었기에, 들어갈때 매우 빠르게 들어 갈 수 있음

    < 동적인 페이지를 사전 렌더링 하는 "단점">
        : "수백개의 페이지를 사전 렌더링한다?" ==> 첫 로딩시에 미친듯이 느려짐 
        : 들어가지도 않을 페이지라면 데이터낭비, 시간낭비

    < 동적인 페이지를 사전 렌더링 하는 "기준">
        : 사용자들에게 검색이 되어야하고, 반드시 자주 들어가지는 페이지


    ==>> 그렇다면, "p1, p2, p3 페이지"가 있을 때, "한 페이지만 자주 접속해서, 단 한 페이지만, 사전 렌더하고 싶다면 어떨까?"

        "getStaticProps" 로 인해, "사전 데이터 페칭"을 하여, "동적 페이지 임에도 사전 렌더가 되도록 하였고"
        Next.js 는, 얼마나, 어떤 페이지가, 사전 렌더될지 정해야 모르는 상태이기 때문에,
        "모든 사전 데이터 페칭"된 데이터들을 지정하여, 알려주어야 할까?

    ==>> "아니다". 
-        "사전 데이터 페칭(pre-data-fetching) 을 하였어도, 필요한 값에만 따로 적용하여, 사전 렌더링 할 수 있다."

-        "fallback" 키를 이용해서 *******************



15. getStaticPaths 함수의 fallback 키에 대하여 [true, false, "blocking"], 그리고 Loading
    : fallback 키는, "사전 데이터 페칭" 된 모든 데이터를, "모두 사전 렌더링 할것인가?" 에 대한 키이다.

    1. [p1, p2, p3 페이지"가 있을 때, "한 페이지만 자주 접속해서, 단 한 페이지만, 사전 렌더하기]

    ========    <기존> : `fallback : false` ====================================================

            function HomePage(){
                const {xxx} = props
            }

            export async function getStaticPaths() {
                return {
                    paths: [
                        { params: { productid: "p1" } },
                        { params: { productid: "p2" } },
                        { params: { productid: "p3" } },
                    ],
                    fallback: false,
                };
            }

-           ==> 반드시, "모든 사전 페칭된 데이터"에 대하여, "전부 사전 렌더링"을 시켜주어야한다.


    ========    <특정 페이지만 사전렌더> :  `fallback : true` ====================================================

            function HomePage(){
                const {xxx} = props

                if(!xxx){
                    retrun (
                        <div> ...Loading </div>
                    )
                }
            }

            export async function getStaticPaths() {
                return {
                    paths: [{ params: { productid: "p1" } }],
-                   fallback: true,
                };
            }

-           ==> "모든 사전 페칭된 데이터"에 대하여, "전부 사전 렌더링"을 "시켜줄 필요가 없다"
            [단!, "useEffect" 와 마찬가지로, "값이 없을 경우를 설정하여", 컴포넌트 함수 안에 "Loading 구문"을 넣을 필요가 있다.]


    ========    <특정 페이지만 사전렌더> :  `fallback : "blocking" ` ====================================================

            export async function getStaticPaths() {
                return {
                    paths: [{ params: { productid: "p1" } }],
-                   fallback: "blocking",
                };
            }

-           ==> "모든 사전 페칭된 데이터"에 대하여, "전부 사전 렌더링"을 "시켜줄 필요가 없다"
            [ fallback : "blocking" 은, 컴포넌트 함수 안에 "Loading 구문"을 "넣을 필요가 없다".]
                ==> 대신, 로딩이 조금 오래걸린다 
                "사전 렌더하지 않은 페이지를 처음 들어갈때", 요청을 받으면, "그 페이지의 데이터들이 전부 로드될때까지 무조건 기다리므로"


    ==== < 최종코드 > ================================================================================================

        import { Fragment } from "react";
        import fs from "fs/promises";
        import path from "path";

        function ProductDetail(props) {
            const { loadedProduct } = props;

            if (!loadedProduct) {
                return <p> loading...</p>;
            }

            return (
                <Fragment>
                <h1> {loadedProduct.title}</h1>
                <p> {loadedProduct.description} </p>
                </Fragment>
            );
        }

        export async function getStaticProps(context) {
        const { params } = context;
        const inputId = params.productid;

        const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
        const jsonData = await fs.readFile(filePath);
        const productData = JSON.parse(jsonData);

        const product = productData.products.find((item) => item.id === inputId);

        return {
            props: {
                loadedProduct: product,
            },
        };
        }

        export async function getStaticPaths() {
        return {
            paths: [{ params: { productid: "p1" } }],
            fallback: true,
        };
        }
        export default ProductDetail;

        ================================================================================================



        [궁금증] 
            그럼 "굳이 useEffet" 를 사용하지 않아도..? 
            "getStaticProps 함수"와 "fallback 키"를 이용하여, "사전 렌더링은 없는", "초기 렌더시 데이터 페칭" 이 가능 하지 않을까?

            getStaticProps 함수로," context.params" 를 빼서(useRouter.query 하듯) 값을 받아넣고,
            "데이터를 서버에서" 불러오고, "그것에 맞는 값을 find" 해서
            "props 한 컴포넌트 함수"(우리가보는 메인함수)에 넣으면 깔끔...할거같은데!

[10~15 총정리 : "Detail 페이지"처럼, "특정 뽑은 데이터"로 "사전 데이터 페칭"을 통해 페이지를 구성하되, "사전 렌더를 할지말지 결정하는 것"]

    1. "getStaticProps 함수를 통해, 사전 데이터 페칭"

        export async function getStaticProps(context){
            const {params} = context

            ...

            if(!data){
                "redirect" or "notFound"
            }

            retrun {
                props: {
                    xxxData : xxxValue
                }
                revalidate: xx Second
            }
        }

    2. "데이터 페칭된 값으로, 컴포넌트 함수 에 값을 넣음"

        function HomePage(props){
            cosnt {xxxData} = props

            retrun (
                <div>
                    {xxxData}
                </div>
            )
        }

    3. "getStaticPaths 함수를 통해, 어떤 동적 페이지를 사전 렌더 할지 결정"

        export async function getStaticPaths(){
            retrun {
                paths:[
                    { params : { 동적URL이름: "사전렌더할URL"} }
                    { params : { 동적URL이름: "사전렌더할URL"} }
                    ...
                ]
                fallback: true          (특정 페이지만 사전렌더 할거면)
                        : false         (모든 페이지를 사전렌더 할거면)
                        : "blocking"    (특정 페이지만 사전렌더 할거면)
            }
        }

    4-1. "특정 페이지만 사전렌더 한다면" [fallback : true], 
        "사전렌더 되지 않는 페이지들의 데이터들이 불러와질 시간이 필요하므로", 불러오는 시간동안(데이터가 없는동안) Loading 구현
      
        function HomePage(props){
            cosnt {xxxData} = props
        
            if(!xxxDAta){
                retrun(
                    <div>
                        Loading...
                    </div>
                )
            }

            retrun (
                <div>
                    {xxxData}
                </div>
            )
        }

    4-2. "특정 페이지만 사전렌더 하지만 'blocking' 을 사용하는 경우" [fallback : "blocking"]
            Loading 구문 쓸 필요 없이, 쓰면 된다.
    
    
16. getStaticPaths 함수의 paths 를 하드코딩 해서 쓸 순 없잖아? map을 사용하여, paths 객체 만들기 + 데이터도 함수로 아웃소싱

    <목표>
        ==> { params : { 동적URL이름: "사전렌더할URL"} } 이러한 양식을 가진, 배열 만들기 // 받아온 데이터로

    <프로세스>
        1. DB에서 받아오는 것처럼, 데이터 받아오는 함수 아웃소싱

        2. 데이터 함수를 각 getStaticPaths, getStaticProps 에 전달

        3. getStaticPaths 안에서 map 으로 값들을 양식에 맞게 만듬, 집어넣음

    <전체 코드>

-       async function getData() {
            const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
            const jsonData = await fs.readFile(filePath);
            const productData = JSON.parse(jsonData);
        
-           return productData;}


        export async function getStaticProps(context) {
            const { params } = context;
            const inputId = params.productid;
        
-           const productData = await getData();
        
            const product = productData.products.find((item) => item.id === inputId);
        
            return {
            props: {
                loadedProduct: product,
            },
            };
        }
        
        export async function getStaticPaths() {
-           const productData = await getData();
        
-           const productIds = productData.products.map((product) => product.id);       
-           const params = productIds.map((pid) => ({ params: { productid: pid } }));    ==> "양식에 맞게 변경"
                                                                           
            return {
-               paths: params,
                fallback: false,
            };
        }
      export default ProductDetail;

        * 어차피 전부 다 paths 에 넣어주었으므로, fallback 은 다시 false 로 바꿧다

17. 없는 페이지 방문시, notFound 에러 생성시키기 [ fallback : true ], [getStaticProps : notFound , redirect : {destination}]

    <조건>
        사전 렌더링에, find를 이용해, 
        "조건에 맞는 데이터"만, "사전 데이터페칭", "사전 렌더링"
        그리고," 사전 데이터페칭 되지 않은, 찾는 데이터에 없는, 새로운 p4" 를 URL 에 투입

    1) "fallback : true" 로 설정 후, "Loading 구문을 넣지 않을" 경우
        => 최초 렌더시, 데이터가 없으므로 오류

    2) "fallback : true" 로 설정 후, "Loading 구문을 넣을" 경우
        => "최초 렌더시", 데이터가 없을때, "로딩중이 뜨나", "결국엔 맞는 데이터가 없기 때문에 오류"

-   3) 그렇다면, "없는 페이지" 라고 말해주거나, "다른 페이지로 넘겨야한다"

        export async function getStaticProps(context) {
            const { params } = context;
            const inputId = params.productid;
        
            const productData = await getData();
        
            const product = productData.products.find((item) => item.id === inputId);
        
-           if (!product) {
            return {
-               notFound: true,
            };
            }
            return {
            props: {
                loadedProduct: product,
            },
            };
        }

[ 정리 ]

-   0. "정적 생성 사전 렌더링"은, "미리 정적인 파일을 딱 정해두고, 사전 렌더링 하는 것이다"
        그로인한 문제를 해결하기 위해, revalidate 키를 이용하여, 무엇이 바뀌었는지, 정한 시간마다 재검사를 하는것이다.
-           <요청이 들어올때마다 재검사를 하는 "서버사이드 렌더링" 과 가장 큰 차이점이다.>

    1. Next.js 는 기본적으로 "정적 페이지" 에 대하여, "자동적으로 사전 렌더링"을 진행한다.

    2. "동적 페이지"는 "자동적인 사전 렌더링을 하지 않는다"

    3. "동적 페이지"를 "검색되게 하기 위하여", 또한, "더 빠른 로딩을 통한, 유저 사용감 증대"를 위하여, 
        "최초 렌더시 컴포넌트를 완성시킨채로 나타내기 위하여" 마치 useEffect처럼 "사전 데이터 페칭"을 진행한다.

    4. "동적 페이지를 사전 데이터 페칭 하면", 자동적으로 "사전 렌더링을 진행해야한다."

    5. "정적 페이지는" 오로지, "최초 렌더시 컴포넌트를 완성시킨채로 나타내기 위하여" 사전 데이터 페칭을 진행하면 깔끔하게 해결된다.

    6. 하지만 "동적 페이지는" 사전 데이터 페칭 을 하면, 사전 렌더링을 진행시켜야하고, Next.js 는 "동적페이지에 한 해"
        얼만큼의 동적 페이지를 생성해야하는지, 모르기 때문에, 사전 렌더링을 진행 시킬 수 없다.

    7. 그래서 Next.js 에게, "어떤것을 사전 렌더링 해야 할지 알려주어야한다."

    8. "사전 렌더링의 한 종류로, 정적 생성(Static Generation)이 일반적으로 사용되고"
    
    9. 정적 생성의 방법에는, "getStaticProps" 와 "getStaticPaths" 로 각각 사전 데이터 페칭, 사전 렌더링을 진행한다.

    10. 사전 렌더링에는, "모두", "몇개만", "전부 안함" 을 가진, fallback: false, true, "blocking" 이 있다.

    11. true 로 설정하여, 몇개만 사전렌더링 한다면, Loading 은 필수이다.


- [정적 생성] 을 사용한, 사전 데이터페칭, 사전 렌더링은 대부분, [첫 화면을 구축할때 쓰인다.]
        ==> 실제로 들어오는 요청을 처리 할 수는 없기 때문이다.

- [실제로 들어오는 요청을 처리하기 위해], [서버 사이드 렌더링] 을 시작한다.

< Static Generation  > =====================================================================  <END>  =============



< Server Side Rendering  > ===============================================================================================
    
    <특징>
        서버사이드 렌더링은, "들어오는 모든 요청마다" "새로 재검사를 실행한다."
-           ==> "사전 렌더링을 하지 않고", "들어오는 요청 마다" 렌더링을 한다.

    <사용처>
        "계속해서 데이터가 바뀌는", 잠깐만 지나도, 있던 데이터가 구식이 되는 페이지에 적용하면 좋다.

    <사용방법>
        getStaticProps 와 완전히 같다.
    
    <차이점>
        
-       1. revalidate 키가 없다.
            :revalidate 할 필요가 없으므로(시간마다가 아니라, 요청이 들어면 재검사를 자동으로 실행하기 때문에)

-       2. 사용할 수 있는 context 의 객체가, {params , req, res} 로 3가지 이다.

-       3. 실행이 완전히 서버사이드에서 실행된다.

    <기본 사용>
        function UserProfilePage(props) {
            const { username } = props;
        
            return <div>{username}</div>;
        }
        
        export async function getServerSideProps(context) {
            const { params } = context;
        
            return {
            props: {
                username: "ms",
            },
            };
        }
        
        export default UserProfilePage;
      

1. getServerSideProps 함수는 "서버에서만 실행된다"

    : export async function getServerSideProps(context){...} 의 "context" 에 주목해야한다.

    < getServerSideProps 는 req, res 같은, 서버 도달한 요청을 읽고, 응답을 보낼 수 있다>

        export async function getServerSideProps(context){
-           const { params, req, res} = context

            console.log(req)
            console.log(res)
        }

    ==> req ,res 는 node.js 와 같은 req, res 이며
-   "이로 인하여" "쿠키 데이터 읽기와" 같은 "특수 헤더" 를 읽는 데 아주아주 중요한 역할을 한다.

2. "동적 URL" 에서 getServerSideProps 를 사용하더라도, getStaticPaths 는 필요 없다. "사전 렌더링이 아니라" "들어오는 요청마다 렌더링 하기 때문"
    : getStaticPaths 는, 어떤 페이지를 사전 렌더링 할지 알려준다.
        build 할때, 미리 생성되어 있다는 뜻이다.

    그렇지만, getServerSideProps 는, "들어오는 요청마다 렌더링을 진행한다."
        getStaticPaths 를 사용해, 사전 렌더링 할 이유도, 필요도 없다는 것이다.


    < /[uid].js > 

        function UserProfilePage(props) {
            return <div> {props.id}</div>;
          }
          
          export default UserProfilePage;
          
          export async function getServerSideProps(context) {
            const { params } = context;
          
            const inputUserId = params.uid;
          
            return {
              props: {
                id: "userid = " + inputUserId,
              },
            };
          }
          
    => "동적 페이지"에, props 를 사용하여, 컴포넌트함수에 넣었음에도 불구하고, 오류가 나지 않는다.
        "페이지가 사전 생성 되지 않고", "요청이 들어 올때만 생성되기 때문에"
        Next.js 가, 어떤 동적 페이지를 사전 생성해야 할지 헷갈릴 이유가 없다.

    
3. npm run build 로, 빌드하여, 어떤 페이지가 사전생성되었는지 확인해보자

        info  - Linting and checking validity of types
        info  - Creating an optimized production build  
        info  - Compiled successfully
        info  - Collecting page data  
        [    ] info  - Generating static pages (0/7)Re-Generate
        info  - Generating static pages (7/7)
        info  - Finalizing page optimization

        Route (pages)                              Size     First Load JS
        ┌ ● / (ISR: 10 Seconds)                    2.31 kB        74.4 kB
        ├   /_app                                  0 B            72.1 kB
-       ├ λ /[uid]                                 270 B          72.4 kB
        ├ ○ /404                                   181 B          72.3 kB
        ├ ● /products/[productid] (848 ms)         351 B          72.5 kB
        ├   ├ /products/p1
        ├   ├ /products/p2
        ├   └ /products/p3
-       └ λ /user-profile                          284 B          72.4 kB
        + First Load JS shared by all              72.4 kB
        ├ chunks/framework-8c5acb0054140387.js   45.4 kB
        ├ chunks/main-d2a793b6dc23a82a.js        25.7 kB
        ├ chunks/pages/_app-b982fa09370b0414.js  284 B
        ├ chunks/webpack-8fa1640cc84ba8fe.js     750 B
        └ css/ab44ce7add5c3d11.css               247 B

-       λ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)
        ○  (Static)  automatically rendered as static HTML (uses no initial props)
        ●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)
        (ISR)     incremental static regeneration (uses revalidate in getStaticProps)

    ==> " λ " 표시가 있는 페이지는 server 측에서, "server-side renders at runtime" 즉, 실행될때만 생성되는 페이지로
          "사전 생성 되지 않았음을 보여준다."

    ==> "Generating static pages (7/7)" 을 보면, " λ " 로 표기된 "두 getServerSideProps 를 사용한 페이지들"은,
          "전부 사전생성 되지 않았음을 보여준다."

    ==> getServerSideProps 를 사용하면, 서버측에서, 요청을 받으면 실행되며, 사전생성 되지 않음을 알 수 있따.


[정적생성, 서버사이드 렌더링 정리]

    : 정적 생성은, "사용자 경험을 좋게 하기 위해", "사전 구성된 페이지를 보여주기 위해", "검색 기능을 강화시키기 위해" 사용한다.
          ==> 정적인 사전 준비된 페이지 준비에 적합

    : 서버사이드 렌더링은, "순식간에 계속 바뀌는 데이터로, 구성된 페이지를 구성할때" 주로 사용한다.
          또한 "쿠키"와 같이, "서버측에 접근해야 하는 데이터" 를 다룰때 사용한다.


< Server Side Rendering  > =====================================================================  <END>  =============


< Client Side Data Fetching >  ==================================================================================
    
    : 여태까지 "데이터를 사전 페치 (Data Pre Fetching )" 에 대하여 배워보았다.

-   이번에는, "사전 데이터 페칭을 하지 않는", 사전에 데이터 페칭을 하지 않는 "Client Side Data Fetching" 에 대하여 배워보자

    <Client Side Data Fetching 의 이유>

    1. "매번 빠르게 계속해서 데이터가 바뀌는 사이트"
          ex) 주식 차트 사이트
            프리 페칭, 프리 렌더링을 하는 의미가 없음 [유저들이 데이터를 미리 받고 들어가 봐야 어차피 예전 데이터일 뿐이므로]

            그저 들어갔을때, 새로운 데이터를 주면 그만일분

    2. "특정 유저에게 한정되는 데이터"
          ex) 온라인 쇼핑몰의 개인적인 주문내역, 개인 계정 프로필 페이지

            프리 페칭 할 이유가 없고, 검색엔진에 이걸 검색되게 할 이유도 없다.

    3. "페이지에 수많은 데이터가 있는 페이지"
          ex) 대쉬보드처럼, 수많은 데이터들이 페이지 내에 있고, 그것을 전부 들어갈 것도 아니라면

            괜히 들어가는 데만 수많은 시간이 소요된다.

    4. "정말 프리페칭 할 필요 없거나, 프리페칭이 불가능한 것들"

-   ==> 이 경우들에는, React 앱 내부에서, 사용자가 페이지에 방문할 때만, 불러오도록 하면 충분하다.


1. Client Side Data Fetching - "useEffect", "useState", [전통적인 React의 데이터 페칭]

    import { useEffect, useState } from "react";

    function UseEffectDataFecthPage() {
    const [sales, setSales] = useState();
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        fetch("https://next-course-ca17a-default-rtdb.firebaseio.com/sales.json")
        .then((response) => response.json())
        .then((data) => {
            const trasnformData = [];

            for (const key in data) {
            trasnformData.push({
                id: key,
                username: data[key].username,
                volume: data[key].volume,
            });
            }
            setSales(trasnformData);
            setIsLoading(false);
        });
    }, []);

    if (isLoading) {
        return <div> isLoading...</div>;
    }

    return (
        <div>
        {sales.map((sale) => (
            <p>{sale.id}</p>
        ))}
        </div>
    );
    }
    export default UseEffectDataFecthPage;

2. "useSWR Hook" , Next.js Hook 사용해보기
        : useSWR Hook  사용하여, 데이터 페칭하기 

        <useSWR hook>
            : nextjs 에서 개발한, 데이터 페치 훅

        <준비>
            [npm install swr],
            import useSWR from 'swr'
        
        <장점>
            1. fetch 를 사용하는 것보다 훨씬 간결하다 (로직의 단순화)
            2. "데이터 캐시" 제공, "데이터 revalidate(유효성 재검사)" 제공
            3. 기타등등 수많은... 기능... 들...

            https://swr.vercel.app/ko

        <기본 사용법>

            const fetcher = (url) => fetch(url).then((res) => res.json());

            const { data, error } = useSWR("데이터불러올 URL", fetcher)

                https://swr.vercel.app/ko 참조
                https://codesandbox.io/s/swr-basic-p7dg6?from-embed=&file=/src/App.js 참조

-       <주의사항>
            *** [React 컴포넌트 함수]에서만 사용가능하다

                "getStaticProps",
                "getServerSideProps" 

-               ==> React 컴포넌트 함수가 아니다!

                이 두 함수에서는, 기존에 사용하던 fetch 를 사용해야한다.

        <사용>
-           import useSWR from "swr";

            function UseEffectDataFecthPage() {
-               const fetcher = (url) => fetch(url).then((res) => res.json());

-               const { data, error } = useSWR(
-                   "https://next-course-ca17a-default-rtdb.firebaseio.com/sales.json", fetcher
-               );

                if (!data) {
                    return <div>Loading...</div>;
                }

                return <div>...</div>;
            }
            export default UseEffectDataFecthPage;

        ==> 이런 매우매우 간단한 함수로, 데이터 페칭을 진행 할 수 있다.

        ** 물론, 현 데이터가 fireBase 에서 가져온 데이터라, 
-           [객체 안에 객체가 담긴 이상한 형태로 가져와 져서]
            "useEffect" 를 이용하여, "data"가 바뀔 때마다 재실행되는 "데이터 재정립"을 진행하고,
            그것을 "useState 에 넣는 추가적인 프로세스"가 필요할뿐, "사실 저렇게 까지 하면, 데이터 페칭이 깔끔하게 끝난다".

        ===== <최종> ==============================================================

            import { useEffect, useState } from "react";
            import useSWR from "swr";

            function UseEffectDataFecthPage() {
                const [sales, setSales] = useState();
                const fetcher = (url) => fetch(url).then((res) => res.json());

                const { data, error } = useSWR(
                    "https://next-course-ca17a-default-rtdb.firebaseio.com/sales.json",fetcher);

                useEffect(() => {
                    if (data) {
                        const reformData = [];

                        for (const key in data) {
                            reformData.push({
                            id: key,
                            username: data[key].username,
                            volume: data[key].volume,
                            });
                        }

                        setSales(reformData);
                    }
                }, [data]);

                if (error) {
                    return <div>Fail to Load</div>;
                }
                
                if (!data || !sales) {
                    return <div>Loading...</div>;
                }

                return (
                    <div>
                        {sales.map((sale) => (
                            <li key={sale.id}>{sale.id}</li>
                        ))}
                    </div>
                );
            }
            export default UseEffectDataFecthPage;

        ==> 1. 기본 SWR HOOK 
            2. useEffect Hook 를 사용해, data를 받을때마다, 새 값 추가하여, useState 에 추가하는 코드 추가
            3. error 시 나오는 코드 추가

    ============================================================================================================================

4. "Client Side Data Fetching + Pre Data Fetching"

    : "getStaticProps 와 useSWR Hook" 을 이용하여,
        "초기 일부 데이터를, 프리 페칭하고, 클라이언트 사이드에서, 최종 업데이트 하는 페이지를 만든다."

    <사용하는 이유>
        필요하다면, 이렇게 사용할것... 그런 앱이 있을 수도 있다.
        "프리 패칭" 과 "클라이언트 패칭" 이 동시에 필요한 그런 앱...!

    < 생각할것 >

    1. "getStaticProps" 나 "getServerSideProps"는 "async 함수"이므로, "fetch" 를 할때 "await" 를 사용할 수 있다!
    2. getStaticProps 를 사용하면, 데이터를 프리 페칭 하는것이고
    3. SWR hook 은 클라이언트 사이드 데이터 페칭이다.

    4. "getStaticProps" 로, "데이터 프리 페칭"을 진행한 후에, 컴포넌트 함수의 "state 초기값에 집어넣으면",
        최소한 일부 데이터는, 프리 페칭된 상태로 시작하므로, 더 빠른 로딩을 얻을 수 있다.


    <코드 추가> ===============================
        : 기존 코드에, "프리 페칭 할 데이터를 추가한다."

        export async function getStaticProps() {
            const response = await fetch(
              "https://next-course-ca17a-default-rtdb.firebaseio.com/sales.json"
            );
          
            const data = await response.json();
          
            const reformData = [];
          
            for (const key in data) {
              reformData.push({
                id: key,
                username: data[key].username,
                volume: data[key].volume,
              });
            }
            return {
              props: {
                sales: reformData,
              },
            };
          }
    ==============================================================

[최종정리]

1. Next.js 는 "정적인 페이지" 를 "자동으로 사전 렌더링"을 진행한다.
2. 만약 페이지에, 불러오는 데이터가 있다면, 그것은 사전 렌더링을 자동으로 하지는 않을 것이다.(불러오는 코드만 사전 렌더링 되겠다)
3. "데이터를 불러온 채로, 사전 렌더링", 즉 "데이터 프리 페칭" 을 하고싶다면, "getStaticProps", "getServerSideProps" 를 사용한다.
4. "getStaticProps", 는 "서버사이드 코드"와 "클라이언트 사이드 코드", 두 위치 "모두 다 사용" 할 수있다
5. 그 예로, "getStaticProps"에서는  "fs", "path" 에 접근하여, "파일 시스템을 다룰 수 있다".
6. "getStaticProps" 는 "revalidate 키"를 이용하여, "재검사 시간을 정할 수 있다".
7. "동적 페이지" 일 경우, "getStaticProps" 를 사용하면, "getStaticPaths" 를 사용하여, "얼마나 사전 렌더링 할지" Next.js 에게 알려야한다.
8. "getStaticPaths" 가 알릴 때는, "fallback" 키를 사용하며, false, true, "blocking" 이 있다.
9. 모두 사전렌더링은 false, 약간은 true, 전부 안함은 blocking
10. getStaticPaths는 paths 키를 이용하여, "무엇을" 사전 렌더링 할지 알린다.
    paths:[{params: { 동적페이지이름 : 미리렌더링할값 }}]
11. getServerSideProps 는 "오로지 서버측에서 실행되며", "요청이 들어올때만" 렌더링을 하기 때문에, 
        "동적 페이지" 라도, 굳이 "getStaticPaths로, next.js 에게 알릴 필요가 없다."
12. 즉 "getServerSideProps" 는 사실, "사전 렌더링은 아닌것이다."
13. "getServerSideProps" 는 "서버측에서 실행되는 함수이기 때문에" {params} 이외에도, {req,res} 를 사용 할 수 있다. (req로 서버로 보낸 값을 받을 수 있다.)
14. 클라이언트 데이터 페칭은, 클라이언트 측, 즉, 자바스크립트(React) 가 완전히 실행되고 나서, 데이터를 페칭하는 것이다.
15. 기존에는(native React) useEffect와, useState 를 사용하여, 데이터 페칭을 진행한다.
16. "useSWR Hook" 을 사용하면, 매우 간단하게, 데이터 페칭을 진행 할 수 있다.
17. "useSWR Hook" 은, 컴포넌트 함수에서만 사용 가능하다.
18. useSWR Hook 과 getStaticProps 를 사용하여, "데이터 프리 페칭", "클라이언트 사이드 데이터 페칭" 을 동시에 진행 할 수도 있다.
19. "getStaticProps는" "async 함수"이기에, ".then 이 아니라, 그냥 await 써서", 편하게 사용해도 된다.
20. useEffect, useState 를 사용할때는 await 절대안된다. 앱 무한로딩걸린다.


21. Loading구문이 필요한 것들은 [useEffect], [useSWR], [fallback 을 true 로 하는 getStaticProps ]
    






    